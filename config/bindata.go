// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// hsdp.toml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hsdpToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4d\x6f\xe3\x36\x10\x3d\x57\xbf\x62\x1a\x5f\x2b\x07\xbb\xb9\x05\x58\x14\x69\x62\x64\x83\x6e\x37\x0b\x3b\x45\x51\x14\xc1\x62\x4c\x8d\xa4\x41\x24\x52\xe0\x87\x1d\xf7\xd7\x17\xd4\x47\x2c\xdb\xf1\x8a\x8a\xd3\x5b\x44\x72\x1e\xe7\xbd\x79\x24\x27\x9e\xc0\x43\xce\x06\xd8\x00\x42\x56\xa8\x25\x16\xa0\x29\x63\x63\xf5\x06\x52\xa5\xa1\x72\xcb\x82\x05\x7c\x5e\xdc\x7c\x03\x43\x7a\xc5\x82\x4c\x34\x01\xa1\xa4\x45\x96\x2c\x33\x28\x95\xb1\x60\x2c\x5a\x16\x7e\x38\xe5\xcc\x69\xb4\xac\xe4\x14\xee\xac\x81\x12\x59\x42\xe5\x74\xa5\x0c\xf9\x6d\xac\x82\x68\x02\x9a\x12\x27\x68\x77\x3d\x54\xa8\xb1\x24\x4b\xda\x00\xca\x04\x12\xcd\x2b\x02\x74\x56\x95\xcd\xbc\x4a\xc1\xe6\xe4\xc3\xab\x02\x6d\xaa\x74\x09\xa9\xd3\x36\x27\x0d\xcb\x0d\xe4\xb8\xf2\xe9\x20\xe4\xae\x44\x59\x23\x94\x28\x72\x96\x04\x9a\x30\xc1\x65\x41\x60\x94\xd3\x82\x40\xa5\x35\x85\xb2\x54\xf2\x68\x0a\xd1\xc4\x6f\xf4\x1b\xa5\x4a\x13\x38\xe3\xa1\xd9\x02\x1a\xd8\x28\xa7\xb7\x40\x60\xb5\xb3\x39\x54\x05\xa1\x69\xf9\xe8\xd2\xaf\xcc\xd1\x43\xf8\x7c\xe9\xb9\x22\x61\x29\x81\x15\x16\x8e\xcc\x34\x9a\x44\x13\xb8\x2a\x8c\xf2\xcb\x32\x45\x06\xd6\x6c\x73\xe5\x2c\x18\xdc\xb0\xcc\x7e\x81\xa5\xb3\xb0\x26\x58\x73\x51\xf8\xb1\x7a\x63\xb9\x59\xe3\xe6\x32\x9a\xc0\x9d\xf5\x32\xd6\x59\x68\x32\x95\x92\x86\x97\x5c\xd8\x8d\x57\x96\xa4\x71\xda\xa7\xa1\x35\x09\xbb\xc7\x4d\xa5\x9e\x51\x1d\x98\x50\x55\xa8\x4d\x49\xd2\xb6\xe9\xdc\xa5\x7e\x02\x4c\xa5\x2c\x90\xd6\x4a\x1b\x50\x1a\x58\x0a\x55\x56\x05\x59\x02\x96\x5e\xef\x56\xa4\x86\xac\x46\x36\x04\xe8\x41\xbf\xcd\xa7\xf0\x90\xa3\x7c\x32\x3f\xd7\x70\x37\x94\xb2\x64\xbf\xd8\x5c\xd6\x03\x73\xca\x7c\x64\xec\x5d\x46\x2a\xd3\x58\xe5\x2c\x5a\xaf\x29\x09\xeb\x9c\x34\xbd\xf8\x0b\x50\x53\x9b\x22\x25\xd1\x04\x66\x72\xc5\x5a\x49\x9f\x6e\x8d\x60\x2c\x66\x54\x8b\xc6\xf2\x08\xa0\x55\x80\x9c\x80\xb7\x5e\x8e\x86\x92\x1e\x63\x9f\xef\xa2\xd9\xa9\x46\x13\x4a\x1a\x57\xb6\xf6\x48\xed\x1a\xb7\x99\x78\x61\xa4\xb1\x28\xdb\xa5\xa6\x22\xc1\x29\x8b\x3e\x9a\x4a\xfd\x44\xb7\x3e\x9a\xc0\x67\x26\x8d\x5a\xe4\x1b\xa0\x67\xf4\xea\x35\x0a\xcc\x50\xdb\x3c\x9a\x00\x74\x5a\x38\x13\x13\x1a\x5b\x0f\x41\x97\x51\xfb\x05\x20\xd2\xf6\xcf\x3e\x79\x51\x30\x49\x1b\x5b\x7a\x09\x3b\x0c\x04\x60\x2c\xa3\xc9\x4f\x00\x9c\x94\xbd\x51\x81\xda\x52\xb1\x0b\x4a\xa5\xb4\x50\x69\x95\x38\xe1\x6b\x35\x84\xb9\xfd\x3a\x8e\x5c\x0f\x24\xfa\xe5\xab\xcf\x98\x5c\xbc\xde\xa6\xfe\x46\x62\x47\x92\x68\x8e\xdb\xbb\x73\x33\x17\x42\xd7\x1e\x8c\x26\xf0\x95\x8c\xf5\xd7\x80\xd9\x48\x8b\xcf\x97\xf0\x4f\xe3\xb5\x29\x6d\x89\x4c\x5b\x23\x4c\xb9\xb5\xcd\x63\x5d\xfb\x45\x67\x6c\x81\x12\x96\x04\x96\x29\xa9\x2d\xda\xd9\x55\x69\x40\x09\x3d\xa0\x68\x02\x7f\x11\xa0\xbf\x24\x50\x5a\x16\x5c\xa1\xa5\xee\x82\xde\x9e\x13\x0b\x46\x95\x04\x95\xe2\x3a\x64\xd6\x18\xae\xf1\x64\x0b\xbd\x54\x4e\x26\x5d\xc8\x25\x5c\x17\xca\x25\x90\xfa\x41\xbd\xd9\x0f\x21\xc9\xab\xae\x24\x7b\x71\x77\x57\x7f\x44\xbd\x83\xb3\x0b\xd3\x29\xd1\x5a\xfa\x45\x05\x91\x3e\x46\x58\xf1\x77\xa7\x0b\xf8\x04\x67\xb9\xb5\x95\xb9\x3c\x3f\xc7\x8a\xa7\xc2\x03\x4c\x2b\x91\xfa\x9a\x4f\x85\x2a\xcf\x5e\x50\x5a\x9b\x84\xa0\x90\xfb\x30\xad\x72\x93\x54\xbb\x08\x06\x3f\x84\x44\x9b\x8d\xa9\x97\xd6\x00\xac\xce\xfa\x04\x6f\xee\xaf\x7f\x9f\xcd\xe3\xf9\xec\xf6\x6e\xf1\x30\xff\xfb\x28\xc5\x44\x89\x27\xd2\x71\xf7\x66\x3e\x46\xb9\x7f\x0e\x3f\xc1\x59\x33\x31\x95\x7d\xfc\x63\x0c\x87\x40\x3c\xcd\x03\x90\x3e\xc9\x21\x80\x63\x2c\xaf\xef\xbf\x2e\xee\xbf\xcc\x8e\x17\x50\x49\xa3\x0a\x7a\x8c\xf6\xd4\x6b\xc7\xc3\xd8\x0d\x81\x0c\xb2\x1b\x02\x38\xc6\xce\x7b\x76\x9f\x19\xc9\xd5\xb4\x77\xdb\x6c\x0f\x2c\x96\x8f\x11\x63\xb9\xef\x13\xc6\x32\xee\xaf\xef\x70\xaa\x9c\x0b\xae\x4c\x9c\x13\x16\x36\x37\x8e\x2d\x35\x1e\xe4\xe4\x10\x23\x19\x89\x81\xce\xe6\xee\xd0\xb2\xf5\xe8\x38\x24\xc5\x89\xf8\xbe\xdb\x06\xbc\x9d\x5c\x9d\x81\xd2\xfc\x2f\x9d\x2b\xff\xe7\xc7\xf3\xe9\x9a\x8a\x22\x7e\x92\x6a\x2d\xcf\x55\x45\x92\x93\x78\x67\xb3\x5f\xb1\xe2\x78\x45\xda\xb0\x92\x9f\x3e\x9c\xbd\x5a\x0d\x7f\x47\x07\x95\xa1\x5b\xf3\xd6\x12\x04\xc7\xff\x50\xfe\x60\x94\x61\xe9\x03\xa1\xde\x4f\xf6\xee\x64\x9e\x7a\x08\x3a\x9c\x53\x0e\xc1\x20\x46\xf0\x21\x18\x44\x1a\x77\x08\x06\xe0\xfe\x9f\x6a\x8c\x3e\x04\x6f\x2d\x41\x70\x7c\xd0\x21\x78\x07\xe9\x03\xa1\xde\x4f\x76\xff\x5a\x9c\x7a\x00\x76\x5e\x9c\x00\xb3\xef\xac\x0f\x36\xf6\x4e\xd4\x38\x13\xf7\x42\xdf\x5f\xb9\xd1\x66\x0d\x91\xeb\xd5\xb5\x41\x26\x1c\x29\xd3\x2b\x61\xa7\x4b\xd4\xef\xa9\xae\xe6\x0f\xb3\x2f\xc7\x5b\xaa\xfa\xbf\xa5\x6d\x87\xd6\x7c\xc7\xbe\x93\x6a\x7b\xe2\xc3\x7e\xf6\xa0\xa3\x7a\x1d\xc3\x37\x52\x07\x18\xbd\xcc\x16\x17\xd7\xf3\xd9\xcd\x22\xb8\x27\x6a\xfe\xf9\x31\x07\x7d\x57\x3b\x3e\xae\x13\x19\x7c\xfa\x87\x76\x0b\x7e\x78\x43\x5f\xbb\x31\xf4\x06\x2f\xba\xc1\x4b\x3d\x94\xde\xe0\x4e\xbd\x82\x7e\xbe\x5a\x04\xb3\xcd\xf1\x70\xef\x1c\x47\xb2\xec\xdb\xfc\x66\x1e\x2f\x1e\xfe\xbc\x78\xb5\xb0\x06\x65\xb2\x54\xcf\x5b\xc3\x26\x3a\x36\xd6\x5d\x1c\xb6\xf0\xed\x44\xdc\x45\x0c\x56\xb7\x97\xc2\x97\xfb\xdb\xdb\xbb\xaf\xb7\xc1\x12\x14\x2a\xcb\x58\x66\x8f\x11\xcb\x8c\x8c\x55\x7a\xff\x62\x29\x54\xd6\x4d\x7d\x1c\x27\xcc\x13\x2f\x51\xe2\x3e\x5e\x33\xfa\xce\x46\x1a\xc5\xe2\xb4\xcc\xc3\xb3\x1d\xba\x4a\xde\x2e\xfd\xa0\x21\x82\xa5\x3f\xfd\x8a\x1a\x27\xfd\x49\x99\x87\x67\xfb\xa3\x7e\xe6\xed\xb2\xef\x3c\xaa\xc1\x12\x9b\xd7\x7e\x0f\x78\xb5\x6d\x18\x27\x65\x70\x36\x7b\xbf\x05\xfc\x17\x00\x00\xff\xff\xc9\x12\x60\x19\xde\x18\x00\x00")

func hsdpTomlBytes() ([]byte, error) {
	return bindataRead(
		_hsdpToml,
		"hsdp.toml",
	)
}

func hsdpToml() (*asset, error) {
	bytes, err := hsdpTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hsdp.toml", size: 6366, mode: os.FileMode(420), modTime: time.Unix(1593574059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hsdp.toml": hsdpToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hsdp.toml": &bintree{hsdpToml, map[string]*bintree{}},
}}
