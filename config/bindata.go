// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// hsdp.toml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hsdpToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x4f\x6f\xdb\xb8\x13\x3d\xff\xf4\x29\xe6\x57\x5d\xd7\x2e\xba\xb9\x05\xe8\xc1\x4d\x8c\xd4\x68\x37\x29\xec\x2c\x8a\xc5\xa2\x58\x8c\xa9\x91\x44\x54\x22\x09\x92\xb2\xe3\x6f\xbf\xa0\xfe\xc4\x52\x2c\x59\x54\xe2\xc5\x62\x6f\x31\xc5\x79\x33\x6f\xe6\xcd\x90\x4c\x08\x8f\x29\x37\xc0\x0d\x20\x24\x99\xdc\x62\x06\x9a\x12\x6e\xac\x3e\x40\x2c\x35\xa8\x62\x9b\x71\x06\x9f\x37\xb7\xdf\xc0\x90\xde\x71\x46\x26\x08\x81\x49\x61\x91\x0b\x2e\x12\xc8\xa5\xb1\x60\x2c\x5a\xce\xdc\x72\xcc\x93\x42\xa3\xe5\x52\xcc\x61\x65\x0d\xe4\xc8\x05\xa8\x42\x2b\x69\xc8\xb9\xb1\x12\x82\x10\x34\x45\x05\xa3\xee\x7e\x50\xa8\x31\x27\x4b\xda\x00\x8a\x08\x22\xcd\x77\x04\x58\x58\x99\x57\xdf\x65\x0c\x36\x25\x67\xae\x32\xb4\xb1\xd4\x39\xc4\x85\xb6\x29\x69\xd8\x1e\x20\xc5\x9d\x0b\x07\x21\x2d\x72\x14\x25\x42\x8e\x2c\xe5\x82\x40\x13\x46\xb8\xcd\x08\x8c\x2c\x34\x23\x90\x71\x49\x21\xcf\xa5\x18\x0c\x21\x08\x9d\xa3\x4f\x14\x4b\x4d\x50\x18\x07\xcd\x2d\xa0\x81\x83\x2c\xf4\x11\x08\xac\x2e\x6c\x0a\x2a\x23\x34\x35\x1f\x9d\xbb\x9d\x29\x3a\x08\x17\x2f\x3d\x29\x62\x96\x22\xd8\x61\x56\x90\x99\x07\x61\x10\xc2\x22\x33\xd2\x6d\x4b\x24\x19\xd8\x73\x9b\xca\xc2\x82\xc1\x03\x17\xc9\x2f\xb0\x2d\x2c\xec\x09\xf6\x3c\xcb\xdc\x5a\xe9\x58\x1c\xf6\x78\xb8\x0e\x42\x58\x59\x97\xc6\x32\x0a\x4d\x46\x49\x61\xf8\x96\x67\xf6\xe0\x32\x4b\xc2\x14\xda\x85\xa1\x35\x31\xfb\x82\x9b\x8c\x1d\xa3\xd2\x30\x22\x95\xc9\x43\x4e\xc2\xd6\xe1\xac\x62\xf7\x01\x8c\x92\x16\x48\x6b\xa9\x0d\x48\x0d\x5c\x30\x99\xab\x8c\x2c\x01\x17\x2e\xdf\x75\x92\x2a\xb2\x1a\xb9\x21\x40\x07\xfa\x6d\x3d\x87\xc7\x14\xc5\x4f\xf3\xff\x12\xee\x96\x62\x2e\xb8\xdb\x6c\xae\xcb\x85\x35\x25\xce\x72\xe6\x54\x46\x32\xd1\xa8\x52\xce\x6a\xad\x49\x01\xfb\x94\x34\x3d\xeb\x0b\x50\x53\x1d\x22\x45\x41\x08\x4b\xb1\xe3\x5a\x0a\x17\x6e\x89\x60\x2c\x26\x54\x26\x8d\x8b\x01\x40\x2b\x01\x79\x04\x4e\x7a\x29\x1a\x8a\x5a\x8c\x5d\xbc\x9b\xca\x53\x89\xc6\xa4\x30\x45\x5e\xcb\x23\xb6\x7b\x3c\x46\xe2\x12\x23\x8c\x45\x51\x6f\x35\x8a\x18\x8f\x39\x6b\xa3\xc9\xd8\x7d\x68\xf6\x07\x21\x7c\xe6\xa4\x51\xb3\xf4\x00\xf4\x84\x2e\x7b\x55\x06\x96\xa8\x6d\x1a\x84\x00\x4d\x2e\x0a\x33\x23\x34\xb6\x5c\x82\x26\xa2\xfa\x17\x00\x8b\xeb\x3f\xdb\xe4\x59\xc6\x49\xd8\x99\xa5\x67\xb3\x53\x43\x00\x8e\x79\x10\xfe\x0f\x80\x47\x79\x6b\x95\xa1\xb6\x94\x75\x41\x29\x17\x16\x94\x96\x51\xc1\x5c\xad\xc6\x30\x8f\xbf\x86\x91\xcb\x85\x48\x3f\xff\x6a\x33\xa6\x62\xb6\x3f\x86\xfe\x4a\x62\x03\x41\x54\xed\x76\x71\x6e\xe6\x8a\xe9\x52\x83\x41\x08\xf7\x64\xac\x1b\x03\xe6\x20\x2c\x3e\x5d\xc3\x9f\x95\xd6\xe6\x74\x24\x32\xaf\x85\x30\xe7\xb5\x6c\x7e\x94\xb5\xdf\x34\xc2\x66\x28\x60\x4b\x60\x39\x45\xa5\x44\x1b\xb9\x4a\x0d\x28\xa0\x05\x14\x84\xf0\x9d\x00\xdd\x90\x40\x61\x39\xe3\x0a\x2d\x35\x03\xfa\xd8\x27\x16\x8c\xcc\x09\x94\xe4\xa5\xc9\xb2\x12\x5c\xa5\xc9\x1a\x7a\x2b\x0b\x11\x35\x26\xd7\x70\x93\xc9\x22\x82\xd8\x2d\xea\xc3\x4b\x13\x12\x7c\xd7\x94\xe4\x85\xdd\x6a\xf1\x5b\xd0\x6a\x9c\x2e\x4c\x93\x89\x5a\xd2\xcf\x59\x60\xf1\x8f\xa0\xd0\x19\x7c\x84\x77\xa9\xb5\xca\x5c\xbf\x7f\x8f\x8a\xcf\x99\x33\x9e\x2b\x16\xbb\x7a\xcf\x99\xcc\xdf\x3d\x23\xd4\x12\x19\x43\xa0\xe2\xc3\x5c\xa5\x26\x52\x5d\x6b\x83\x1f\xc6\x2c\xcd\xc1\x94\xdb\x4a\x63\x2e\x8f\xb6\xa8\x90\x5d\xf9\x58\xa3\xba\x3a\x5a\xb7\x52\x72\xfb\x70\xf3\x65\xb9\x9e\xad\x97\x77\xab\xcd\xe3\xfa\x8f\xc1\xa4\x44\x92\xfd\x24\x3d\x6b\x4e\xd9\x1f\x41\xea\x0e\xd0\x8f\xf0\xae\xfa\x30\x17\x7d\xd1\xbd\xcc\xcb\x18\x88\x4b\xd0\x09\x48\x3b\x3d\x63\x00\x1e\x39\x1a\x83\x18\x4a\xd4\xcd\xc3\xfd\xe6\xe1\xeb\x72\x58\x35\x52\x18\x99\xd1\x49\x01\xea\x75\xbf\x04\x8d\x81\x8c\x26\x68\x0c\xc0\x47\x44\x23\x10\x43\x09\x72\xbd\xf6\x32\x39\x24\x76\xf3\xd6\x94\x3c\x0e\x1a\xcc\x4f\xf0\x39\xe6\xb3\xf6\xde\x06\x43\xa5\x3c\xe3\xca\xcc\x52\xc2\xcc\xa6\xa6\xe0\x96\xaa\xfe\xe1\x98\xff\xf5\x66\x8c\xe8\x14\x23\x9a\x88\xd1\x47\xda\x8d\xf0\x51\xb6\xcd\xf7\xd7\x32\xf5\xb7\xef\x67\xe9\x6d\xff\x52\xae\x53\xcb\xfa\x6f\x13\x6d\xc7\xda\x70\x98\x44\xf6\x3f\x55\x4e\x6f\x86\x6e\x18\xbc\xa5\x43\x3b\xc3\xc4\xa3\x1b\xbb\xfb\xc7\x4b\xd5\x3b\xac\x9a\xa0\x27\x95\xc4\x27\xd2\xfe\xbd\xe7\x53\x7d\x66\x9c\x4e\x8e\xb1\x33\x57\x47\x62\xec\xee\x3d\x1f\x63\x67\x6f\xdf\xac\x8a\x68\x37\x1a\x64\x44\x3b\xca\xa4\x2a\x6f\x8b\xaf\xd5\xf7\x34\x8c\x7e\x52\x93\x30\xda\x87\xd3\x6d\xff\xe1\xd4\xad\x50\xd4\x43\xfe\x1f\x99\x93\x03\x8e\x2e\x3c\xa7\x46\xe8\x5c\x66\x4e\x78\x50\x99\xd0\xc7\x23\x21\x4f\xea\xb7\x11\xac\x69\x7d\x31\x00\x36\x4d\x8f\xed\xeb\xe4\x62\xfd\xb8\xfc\x3a\x7c\x9b\x2c\x5f\xa7\xc7\xcb\x69\xf5\x7b\xe6\x2e\x91\xf5\x3b\xe4\xf4\x1d\x71\x72\x99\xec\xc7\x70\x77\xc8\x41\x8c\xce\x5d\xb2\xdf\xde\xf4\xc5\xd0\x62\x76\xb7\x78\x5c\x7e\x5f\x0c\xbf\x24\x12\xb4\xb4\xc7\xd6\xc5\x3b\xd9\x97\xbc\x3c\x18\xf5\x99\x7a\x3c\xaa\xfa\xcc\x4c\xbf\xc7\xee\x55\xb8\xcf\xb0\xda\xd1\x4f\x7d\x73\x75\xb3\x5e\xde\x6e\xbc\xaf\xc1\xd5\x3b\xdd\x9c\x28\xab\x5e\xbf\xf0\x35\x74\xcc\xdb\xc5\xc7\xdc\x14\x7a\x6f\x1f\x77\xbe\xf4\x46\x3d\xb5\x0a\xfa\x79\xb1\xf1\x66\x9b\xe2\xa9\xef\x14\x27\xb2\x6c\x4f\x88\xdb\xf5\x6c\xf3\xf8\xfb\x55\x6f\x61\x0d\x8a\x68\x2b\x9f\x8e\xbd\x1a\xe9\x99\xb1\xc5\xd5\xe9\xab\xad\xfe\x30\x6b\x2c\xa6\x9c\x9a\x5f\x1f\xee\xee\x56\xf7\x77\xde\x29\xc8\x64\x92\x70\x91\x9c\x04\x91\x49\xb7\x4c\xc6\x4a\xfd\xeb\x85\xab\xee\xe3\xd2\xdf\xcd\x58\xc3\x4e\x26\xf8\xf6\xae\xf5\x22\xe8\xed\xe6\xdc\x51\x3e\x99\x9c\xff\xb9\xee\x45\x62\xca\xe1\xee\x05\x38\xf4\x9f\x8a\x2f\xab\x4f\x8b\xfb\x85\xb7\xaa\x7f\xf2\x2d\x0a\x3c\x71\x55\x2d\x5f\x58\xce\x67\x7d\x5d\x4e\xc7\xfe\x94\xde\x2e\xe0\xf3\x94\x2e\xa2\x5c\x7f\x3a\xfe\x92\x3d\x1f\xf6\x14\xad\x9e\x47\xea\x88\xf4\xef\x00\x00\x00\xff\xff\x54\x18\x53\x71\xd8\x1c\x00\x00")

func hsdpTomlBytes() ([]byte, error) {
	return bindataRead(
		_hsdpToml,
		"hsdp.toml",
	)
}

func hsdpToml() (*asset, error) {
	bytes, err := hsdpTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hsdp.toml", size: 7384, mode: os.FileMode(420), modTime: time.Unix(1597596784, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hsdp.toml": hsdpToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hsdp.toml": &bintree{hsdpToml, map[string]*bintree{}},
}}
