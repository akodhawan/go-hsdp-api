// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// hsdp.toml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hsdpToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4d\x6f\xdb\x38\x10\x3d\xaf\x7e\xc5\x6c\x7d\x5d\xbb\xe8\xe6\x16\xa0\x07\x37\x31\x52\xa3\xdd\xa4\xb0\x53\x14\x8b\x45\xb1\x18\x53\x23\x89\xa8\x44\x12\xfc\xb0\xe3\x7f\xbf\xa0\x3e\x62\x39\x96\x2c\x2a\x31\xb0\x37\x9b\xe2\x3c\xce\x7b\xf3\x38\xa4\x34\x81\xc7\x8c\x1b\xe0\x06\x10\xd2\x5c\x6e\x30\x07\x4d\x29\x37\x56\xef\x21\x91\x1a\x94\xdb\xe4\x9c\xc1\xe7\xf5\xed\x37\x30\xa4\xb7\x9c\x91\x89\x26\xc0\xa4\xb0\xc8\x05\x17\x29\x14\xd2\x58\x30\x16\x2d\x67\x7e\x38\xe1\xa9\xd3\x68\xb9\x14\x33\x58\x5a\x03\x05\x72\x01\xca\x69\x25\x0d\xf9\x65\xac\x84\x68\x02\x9a\x62\xc7\xe8\x78\x3e\x28\xd4\x58\x90\x25\x6d\x00\x45\x0c\xb1\xe6\x5b\x02\x74\x56\x16\xd5\x73\x99\x80\xcd\xc8\x87\xab\x1c\x6d\x22\x75\x01\x89\xd3\x36\x23\x0d\x9b\x3d\x64\xb8\xf5\xe9\x20\x64\xae\x40\x51\x22\x14\xc8\x32\x2e\x08\x34\x61\x8c\x9b\x9c\xc0\x48\xa7\x19\x81\x4c\x4a\x0a\x45\x21\x45\x6f\x0a\xd1\xc4\x2f\xf4\x89\x12\xa9\x09\x9c\xf1\xd0\xdc\x02\x1a\xd8\x4b\xa7\x0f\x40\x60\xb5\xb3\x19\xa8\x9c\xd0\xd4\x7c\x74\xe1\x67\x66\xe8\x21\x7c\xbe\xf4\xa4\x88\x59\x8a\x61\x8b\xb9\x23\x33\x8b\x26\xd1\x04\xe6\xb9\x91\x7e\x5a\x2a\xc9\xc0\x8e\xdb\x4c\x3a\x0b\x06\xf7\x5c\xa4\x7f\xc0\xc6\x59\xd8\x11\xec\x78\x9e\xfb\xb1\x72\x61\xb1\xdf\xe1\xfe\x3a\x9a\xc0\xd2\x7a\x19\xcb\x2c\x34\x19\x25\x85\xe1\x1b\x9e\xdb\xbd\x57\x96\x84\x71\xda\xa7\xa1\x35\x31\xfb\x82\x9b\x4c\x3c\xa3\x32\x30\x26\x95\xcb\x7d\x41\xc2\xd6\xe9\x2c\x13\xff\x00\x8c\x92\x16\x48\x6b\xa9\x0d\x48\x0d\x5c\x30\x59\xa8\x9c\x2c\x01\x17\x5e\xef\x5a\xa4\x8a\xac\x46\x6e\x08\xd0\x83\x7e\x5b\xcd\xe0\x31\x43\xf1\xcb\xfc\x5e\xc2\xdd\x52\xc2\x05\xf7\x93\xcd\x75\x39\xb0\xa2\xd4\x47\x4e\xbd\xcb\x48\xa6\x1a\x55\xc6\x59\xed\x35\x29\x60\x97\x91\xa6\x67\x7f\x01\x6a\xaa\x53\xa4\x38\x9a\xc0\x42\x6c\xb9\x96\xc2\xa7\x5b\x22\x18\x8b\x29\x95\xa2\x71\xd1\x03\x68\x25\x20\x8f\xc1\x5b\x2f\x43\x43\x71\x8b\xb1\xcf\x77\x5d\xad\x54\xa2\x31\x29\x8c\x2b\x6a\x7b\x24\x76\x87\x87\x4c\xbc\x30\xc2\x58\x14\xf5\x54\xa3\x88\xf1\x84\xb3\x36\x9a\x4c\xfc\x83\x66\x7e\x34\x81\xcf\x9c\x34\x6a\x96\xed\x81\x9e\xd0\xab\x57\x29\xb0\x40\x6d\xb3\x68\x02\xd0\x68\xe1\xcc\x94\xd0\xd8\x72\x08\x9a\x8c\xea\x7f\x00\x2c\xa9\x7f\xb6\xc9\xb3\x9c\x93\xb0\x53\x4b\xcf\x61\xa7\x81\x00\x1c\x8b\x68\xf2\x1b\x00\x8f\x8b\xd6\x28\x43\x6d\x29\x3f\x06\xa5\x42\x58\x50\x5a\xc6\x8e\xf9\x5a\x0d\x61\x1e\xfe\xf5\x23\x97\x03\xb1\x7e\xfe\xd7\x66\x4c\x6e\xba\x3b\xa4\xfe\x4a\x62\x3d\x49\x54\xdb\xed\xe2\xdc\xcc\x15\xd3\xa5\x07\xa3\x09\xdc\x93\xb1\xbe\x0d\x98\xbd\xb0\xf8\x74\x0d\xff\x54\x5e\x9b\xd1\x81\xc8\xac\x36\xc2\x8c\xd7\xb6\xf9\x59\xd6\x7e\xdd\x18\x9b\xa1\x80\x0d\x81\xe5\x14\x97\x16\x6d\xec\x2a\x35\xa0\x80\x16\x50\x34\x81\x1f\x04\xe8\x9b\x04\x0a\xcb\x19\x57\x68\xa9\x69\xd0\x87\x7d\x62\xc1\xc8\x82\x40\x49\x5e\x86\x2c\x2a\xc3\x55\x9e\xac\xa1\x37\xd2\x89\xb8\x09\xb9\x86\x9b\x5c\xba\x18\x12\x3f\xa8\xf7\x2f\x43\x48\xf0\x6d\x53\x92\x17\x71\xcb\xf9\x5f\x51\x6b\xe3\x1c\xc3\x34\x4a\xd4\x96\x7e\x56\x81\x25\x3f\x23\xa7\x73\xf8\x08\xef\x32\x6b\x95\xb9\x7e\xff\x1e\x15\x9f\x31\x1f\x3c\x53\x2c\xf1\xf5\x9e\x31\x59\xbc\x7b\x46\xa8\x2d\x32\x84\x40\xee\xc3\x4c\x65\x26\x56\xc7\xd1\x06\x3f\x0c\x45\x9a\xbd\x29\xa7\x95\xc1\x5c\x1e\x62\x51\x21\xbb\x0a\x89\x46\x75\x75\x88\x6e\x49\x72\xfb\x70\xf3\x65\xb1\x9a\xae\x16\x77\xcb\xf5\xe3\xea\xef\x5e\x51\x62\xc9\x7e\x91\x9e\x36\xa7\xec\xcf\x28\xf3\x07\xe8\x47\x78\x57\x3d\x98\x89\xae\xec\x5e\xea\x32\x04\xe2\x05\x3a\x01\x69\xcb\x33\x04\x10\xa0\xd1\x10\x44\x9f\x50\x37\x0f\xf7\xeb\x87\xaf\x8b\x7e\xd7\x48\x61\x64\x4e\x27\x05\xa8\xc7\xc3\x04\x1a\x02\x19\x14\x68\x08\x20\xc4\x44\x03\x10\x7d\x02\x7d\x9f\xcf\x7b\xc5\x71\x88\x27\x78\x0e\x71\xcc\x9e\xea\x83\x08\xd8\x54\x7d\xa1\x81\xbb\xea\x5c\x78\x9f\x18\xbe\xf1\xbc\x14\x83\xc4\x76\xd6\x3a\x32\x0e\x5d\x17\x8b\x13\x7c\x8e\xc5\xb4\x3d\xb7\xc1\x50\x19\xcf\xb9\x32\xd3\x8c\x30\xb7\x99\x71\xdc\x52\xc5\x9b\x63\xf1\xef\x9b\x31\xe2\x53\x8c\x78\x24\x46\x17\x69\x7f\x9e\x0d\xb2\x7d\x56\xfb\x95\x4c\xc3\xe3\xbb\x59\x06\xc7\xbf\x34\xe8\x5b\xca\xda\x60\xbc\x96\xec\x70\xfc\x70\x49\x07\x31\xba\x08\x8f\x2a\xe9\xff\xc5\x32\x38\xbe\xdd\x34\xde\x52\xce\xa3\x66\x12\xb0\x23\x8f\xe7\x0f\x97\xaa\xb3\x59\x35\x49\x8f\x2a\x49\x48\xa6\xdd\x73\xcf\x4b\x7d\xa6\x9d\x8e\xce\xf1\xa8\xb7\x0e\xe4\x78\x3c\xf7\x7c\x8e\x47\x73\xbb\xfa\x55\x4c\xdb\xc1\x24\x63\xda\x52\x2e\x55\x79\x7d\x7e\x6d\xcb\x1a\x87\xd1\x4d\x6a\x14\x46\xfb\x80\xba\x1d\x71\x40\xc5\x1d\x1a\x5c\xfe\x60\xe8\x59\xe5\xf2\x8d\x39\x80\xce\x05\x9a\xe2\x00\x9d\xcb\x34\xa5\x00\x2a\x23\x9a\xc6\x40\xca\xa3\x36\xf7\x00\xd6\xb8\x4d\xd8\x03\x36\xce\xfc\xed\xcb\xfc\x7c\xf5\xb8\xf8\xda\x7f\x97\x2f\xbf\x0d\x1c\x5e\x0d\xaa\xff\x53\x7f\x85\xaf\x6f\xac\xa7\x17\xce\x93\xab\x7c\x37\x86\xbf\xae\xf6\x62\x1c\xdd\xe4\xbb\xe3\x4d\x57\x0e\x2d\x66\x77\xf3\xc7\xc5\x8f\x79\xff\x7b\x5c\x8a\x96\x76\xd8\x7a\xed\x49\x77\x25\xaf\x00\x46\x5d\xa1\x01\xb7\xef\xae\x30\xd3\xbd\xe2\xf1\xbd\xbb\x2b\xb0\x9a\xd1\x4d\x7d\x7d\x75\xb3\x5a\xdc\xae\x83\xdb\x5a\xf5\x95\xc4\x9c\x38\xab\x1e\xbf\x70\x7b\x1b\x5a\xed\xe2\x6d\x6e\x0c\xbd\xb7\xb7\xbb\x50\x7a\x83\x2b\xb5\x0a\xfa\x79\xbe\x0e\x66\x9b\xe1\xe9\xda\x19\x8e\x64\xd9\xee\x10\xb7\xab\xe9\xfa\xf1\xfb\x55\x67\x61\x0d\x8a\x78\x23\x9f\x0e\x7b\x35\xd6\x53\x63\xdd\xd5\xe9\x3b\x73\xfd\x60\xda\x44\x8c\x39\xa2\xbf\x3e\xdc\xdd\x2d\xef\xef\x82\x25\xc8\x65\x9a\x72\x91\x9e\x24\x91\x4b\x3f\x4c\xc6\x4a\xfd\xe7\x85\xab\x1e\xb2\x64\xf8\x32\x43\x1b\x76\x34\xc1\xb7\xef\xda\x20\x82\xc1\xcb\x9c\x3b\xca\x47\x93\x0b\x3f\xd7\x83\x48\x8c\x39\xdc\x83\x00\xfb\x3e\x8d\x7c\x59\x7e\x9a\xdf\xcf\x83\x5d\xfd\x8b\x6f\x50\x9c\x7e\x80\xa9\x86\x2f\x6c\xe7\xb3\x6b\x5d\xce\xc7\xe1\x94\xde\x6e\xe0\xf3\x94\x2e\xe2\xdc\x70\x3a\xe1\x96\x3d\x9f\xf6\x18\xaf\x9e\x47\x3a\x32\xe9\x7f\x01\x00\x00\xff\xff\xd1\x8a\xe3\x42\x56\x1e\x00\x00")

func hsdpTomlBytes() ([]byte, error) {
	return bindataRead(
		_hsdpToml,
		"hsdp.toml",
	)
}

func hsdpToml() (*asset, error) {
	bytes, err := hsdpTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hsdp.toml", size: 7766, mode: os.FileMode(420), modTime: time.Unix(1598732446, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hsdp.toml": hsdpToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hsdp.toml": &bintree{hsdpToml, map[string]*bintree{}},
}}
