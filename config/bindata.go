// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// hsdp.toml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hsdpToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdf\x6f\xe3\x38\x0e\x7e\x3e\xff\x15\xbc\xe6\xf5\x9c\x62\xa6\x6f\x05\x06\x87\x5e\x1b\x74\x8a\x9b\x9d\x0e\x92\x2e\x06\x8b\x45\x31\x60\x64\xda\x26\x6a\x4b\x86\x24\x27\xcd\xfe\xf5\x0b\xf9\x47\x63\x27\x4e\xad\x34\xd9\xb7\x58\x26\x3f\x91\x1f\x3f\xca\x54\x26\xf0\x94\xb2\x01\x36\x80\x90\x64\x6a\x89\x19\x68\x4a\xd8\x58\xbd\x81\x58\x69\x28\xca\x65\xc6\x02\xbe\x2e\xee\x7e\x80\x21\xbd\x62\x41\x26\x98\x80\x50\xd2\x22\x4b\x96\x09\xe4\xca\x58\x30\x16\x2d\x0b\xb7\x1c\x73\x52\x6a\xb4\xac\xe4\x14\x1e\xac\x81\x1c\x59\x42\x51\xea\x42\x19\x72\xdb\x58\x05\xc1\x04\x34\x45\xa5\xa0\xbe\x3d\x14\xa8\x31\x27\x4b\xda\x00\xca\x08\x22\xcd\x2b\x02\x2c\xad\xca\xeb\xf7\x2a\x06\x9b\x92\x73\x2f\x32\xb4\xb1\xd2\x39\xc4\xa5\xb6\x29\x69\x58\x6e\x20\xc5\x95\x0b\x07\x21\x2d\x73\x94\x15\x42\x8e\x22\x65\x49\xa0\x09\x23\x5c\x66\x04\x46\x95\x5a\x10\xa8\xb8\x4a\x21\xcf\x95\x3c\x18\x42\x30\x71\x1b\xfd\x8f\x62\xa5\x09\x4a\xe3\xa0\xd9\x02\x1a\xd8\xa8\x52\x6f\x81\xc0\xea\xd2\xa6\x50\x64\x84\xa6\xc9\x47\xe7\xce\x32\x45\x07\xe1\xe2\xa5\xd7\x82\x84\xa5\x08\x56\x98\x95\x64\xa6\xc1\x24\x98\xc0\x4d\x66\x94\x33\x4b\x14\x19\x58\xb3\x4d\x55\x69\xc1\xe0\x86\x65\xf2\x1f\x58\x96\x16\xd6\x04\x6b\xce\x32\xb7\x56\x6d\x2c\x37\x6b\xdc\x5c\x07\x13\x78\xb0\x8e\xc6\x2a\x0a\x4d\xa6\x50\xd2\xf0\x92\x33\xbb\x71\xcc\x92\x34\xa5\x76\x61\x68\x4d\xc2\xee\xe4\xa6\x62\x97\x51\xe5\x18\x51\x91\xa9\x4d\x4e\xd2\x36\xe1\x3c\xc4\xee\x05\x98\x42\x59\x20\xad\x95\x36\xa0\x34\xb0\x14\x2a\x2f\x32\xb2\x04\x2c\x1d\xdf\x0d\x49\x75\xb2\x1a\xd9\x10\xa0\x03\xfd\x31\x9f\xc2\x53\x8a\xf2\xc5\xfc\xbb\x82\xbb\xa3\x98\x25\x3b\x63\x73\x5d\x2d\xcc\x29\x71\x9e\xa1\x53\x19\xa9\x44\x63\x91\xb2\x68\xb4\xa6\x24\xac\x53\xd2\xf4\xa6\x2f\x40\x4d\x4d\x88\x14\x05\x13\x98\xc9\x15\x6b\x25\x5d\xb8\x15\x82\xb1\x98\x50\x45\x1a\xcb\x03\x80\x56\x01\x72\x04\x4e\x7a\x29\x1a\x8a\x3a\x19\xbb\x78\x17\xf5\x4e\x15\x9a\x50\xd2\x94\x79\x23\x8f\xd8\xae\x71\x1b\x89\x23\x46\x1a\x8b\xb2\x31\x35\x05\x09\x8e\x59\x74\xd1\x54\xec\x5e\xb4\xf6\xc1\x04\xbe\x32\x69\xd4\x22\xdd\x00\xbd\xa2\x63\xaf\x66\x60\x86\xda\xa6\xc1\x04\xa0\xe5\xa2\x34\x21\xa1\xb1\xd5\x12\xb4\x11\x35\x4f\x00\x22\x6e\x7e\x76\x93\x17\x19\x93\xb4\xa1\xa5\x37\xb7\x7d\x47\x00\xc6\x3c\x98\xfc\x0b\x80\xa3\xbc\xb3\x2a\x50\x5b\xca\xfa\xa0\x94\x4b\x0b\x85\x56\x51\x29\x5c\xad\xc6\x30\xb7\x4f\x87\x91\xab\x85\x48\xbf\x3d\x75\x33\xa6\x32\x5c\x6f\x43\xff\x60\x62\x07\x82\xa8\xdb\xed\xec\xb9\x99\x2b\xa1\x2b\x0d\x06\x13\xf8\x4e\xc6\xba\x63\xc0\x6c\xa4\xc5\xd7\x6b\xf8\xb3\xd6\xda\x94\xb6\x89\x4c\x1b\x21\x4c\xb9\x91\xcd\x73\x55\xfb\x45\x2b\x6c\x81\x12\x96\x04\x96\x29\xaa\x24\xda\xca\x55\x69\x40\x09\x1d\xa0\x60\x02\x3f\x09\xd0\x1d\x12\x28\x2d\x0b\x2e\xd0\x52\x7b\x40\x6f\xfb\xc4\x82\x51\x39\x41\xa1\xb8\x72\x99\xd5\x82\xab\x35\xd9\x40\x2f\x55\x29\xa3\xd6\xe5\x1a\x6e\x33\x55\x46\x10\xbb\x45\xbd\xd9\x75\x21\xc9\xab\xb6\x24\x3b\x7e\x0f\x37\xbf\x05\x9d\xc6\xe9\xc3\xb4\x4c\x34\x92\x7e\x63\x41\xc4\xcf\x01\x16\xfc\xab\xd4\x19\x7c\x81\x8b\xd4\xda\xc2\x5c\x5f\x5e\x62\xc1\x53\xe1\x00\xa6\x85\x88\x5d\xcd\xa7\x42\xe5\x17\x6f\x28\x8d\x4c\x7c\x50\xa8\xfc\x34\x2d\x52\x13\x15\x7d\x04\x83\x9f\x7c\xbc\xcd\xc6\x54\xa6\x15\x00\xab\xad\x3f\x16\x28\xae\x7c\x11\xb0\xb8\xda\x22\x74\x28\xba\x7b\xbc\xfd\xff\x6c\x1e\xce\x67\xf7\x0f\x8b\xa7\xf9\x1f\x07\x49\x8a\x94\x78\x21\x1d\xb6\x5f\xdd\xe7\x20\x75\x1f\xd4\x2f\x70\x51\xbf\x98\xca\xa1\x08\x77\x39\x1a\x03\x71\x44\xed\x81\x74\x69\x1a\x03\xf0\xe0\x69\x0c\xe2\x10\x51\xb7\x8f\xdf\x17\x8f\xdf\x66\x87\x55\xa4\xa4\x51\x19\x3d\x07\x3b\x05\x68\xd6\xfd\x08\x1a\x03\x19\x25\x68\x0c\xc0\x47\x48\x23\x10\x87\x08\x72\xbd\xb7\x4b\x0e\xc9\xd5\xb4\x73\x6a\x6e\x0f\x1e\xcc\x9f\x03\xc6\x7c\x57\xad\x8c\x79\xd8\xb5\x6f\x71\x8a\x94\x33\x2e\x4c\x98\x12\x66\x36\x35\x25\x5b\xaa\x7b\x89\xa3\x7d\x8c\xe8\x48\x0c\x2c\x6d\x5a\xee\x37\x4e\xb5\x7a\x1c\x92\xe2\x48\xfc\xea\x8f\x33\x1f\x4f\xae\x8a\x40\x69\xfe\x8b\x2e\x95\xfb\xf9\xf9\x72\xba\xa6\x2c\x0b\x5f\xa4\x5a\xcb\x4b\x55\x90\xe4\x28\xec\x6d\xf6\x5f\x2c\x38\x5c\x91\x36\xac\xe4\x97\x4f\x17\x83\xd5\x70\xdf\x1a\xaf\x32\xb4\x36\x1f\x2d\x81\xb7\xff\xbb\xf4\x7b\xa3\x8c\x53\xef\x09\x75\x3e\xda\xdb\xe6\x3e\xb5\x09\x5a\x9c\x53\x9a\x60\x14\xc3\xbb\x09\x46\x91\x8e\x6b\x82\x11\xb8\x7f\xa6\x1a\x47\x37\xc1\x47\x4b\xe0\xed\xef\xd5\x04\x67\xa0\xde\x13\xea\x7c\xb4\xbb\x0f\xce\xa9\x0d\xd0\xfb\x68\x79\x88\xbd\x67\xef\x2d\xec\x9e\xd7\x71\x22\xee\xb8\x9e\x9f\xb9\xa3\xc5\xea\x43\xd7\xa0\xad\x97\x08\x8f\xa4\x69\xc0\xed\x7c\x14\xd5\x83\xcb\x87\x48\xea\x4d\x31\x23\x24\xf5\x6c\xbd\x48\xea\x79\xf8\x93\xd4\x71\x3b\x9d\xa4\xee\xec\x7a\x33\x7f\x9a\x7d\x3b\x3c\xba\x56\x57\xe3\xed\x24\x5c\x3f\x87\x6e\x62\x6d\x2e\x40\xfb\x97\x97\xbd\xc9\x75\x18\xc3\x0d\xac\x07\x31\x7a\x83\xeb\xb0\xbf\x19\x8a\xa1\x93\xd9\xfd\xcd\xd3\xec\xe7\xcd\xe1\x6b\x4b\x82\x96\xd6\xd8\x99\xf2\x93\x75\x95\x97\x47\x46\x43\xae\x1e\x37\xb9\x21\x37\x33\xbc\x63\x7f\xee\x1e\x72\xac\x2d\x86\x53\x5f\x5c\xdd\xce\x67\x77\x0b\xef\x99\xbb\xfe\x93\xc0\xec\xcd\xf5\xcd\xfa\x71\x93\xee\xe8\x68\x39\xb6\x9b\xf7\x60\xe7\x3b\x4d\x1d\x93\xde\xe8\x87\x74\x74\x68\xf0\x4d\x6f\x74\xa7\x4e\x41\xbf\xde\x2c\xbc\xb3\x4d\x71\x7f\xef\x14\x8f\xcc\xb2\x7b\x42\xdc\xcd\xc3\xc5\xd3\xef\x57\x83\x85\x35\x28\xa3\xa5\x7a\xdd\xf6\x6a\xa4\x43\x63\xcb\xab\xfd\x2b\x62\xf3\x22\x6c\x3d\x46\xab\xdb\x09\xe1\xdb\xe3\xfd\xfd\xc3\xf7\x7b\x6f\x0a\x32\x95\x24\x2c\x93\xe7\x80\x65\x42\xc6\x2a\xbd\x7b\x26\x67\x2a\x69\x5f\x7d\x3e\x8e\x98\x17\x5e\xa2\xc4\x5d\xbc\x7a\xf5\xcc\x42\x3a\x2a\x8b\xd3\x22\xf7\x8f\x76\xec\x28\xf9\x38\xf5\xa3\x82\xf0\xa6\xfe\xf4\x23\xea\x38\xea\x4f\x8a\xdc\x3f\xda\xf7\xe6\xe5\x8f\xd3\xde\x1b\xda\xbc\x29\x1e\xfc\xb3\x68\x70\x2c\x3d\x8e\x4a\xef\x68\xde\xfb\xbb\xea\xc4\x18\x7a\x13\xda\xbb\x31\xf4\x2c\xff\x0e\x00\x00\xff\xff\xac\x8d\x4e\x28\x89\x1c\x00\x00")

func hsdpTomlBytes() ([]byte, error) {
	return bindataRead(
		_hsdpToml,
		"hsdp.toml",
	)
}

func hsdpToml() (*asset, error) {
	bytes, err := hsdpTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hsdp.toml", size: 7305, mode: os.FileMode(420), modTime: time.Unix(1593784796, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hsdp.toml": hsdpToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hsdp.toml": &bintree{hsdpToml, map[string]*bintree{}},
}}
