// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// hsdp.toml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hsdpToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4f\x6f\xdb\xb8\x13\x3d\xff\xf4\x29\xe6\x57\x5f\xd7\x2e\xba\xb9\x05\xe8\xc1\x4d\x8c\xd4\x68\x37\x29\xec\x2c\x8a\xc5\xa2\x58\x8c\xa9\x91\x44\x44\x22\x05\x0e\x65\xc7\xdf\x7e\x41\xfd\x89\xe5\x58\xb2\xa8\xc4\xc0\xde\x2c\x6a\xe6\xcd\xbc\x99\xc7\x21\xe5\x09\x3c\x26\x92\x41\x32\x20\xc4\xa9\xde\x60\x0a\x86\x62\xc9\xd6\xec\x21\xd2\x06\xf2\x62\x93\x4a\x01\x5f\xd7\xb7\x3f\x80\xc9\x6c\xa5\x20\x0e\x26\x20\xb4\xb2\x28\x95\x54\x31\x64\x9a\x2d\xb0\x45\x2b\x85\x5b\x8e\x64\x5c\x18\xb4\x52\xab\x19\x2c\x2d\x43\x86\x52\x41\x5e\x98\x5c\x33\xb9\x30\x56\x43\x30\x01\x43\x61\x21\xe8\xd8\x1e\x72\x34\x98\x91\x25\xc3\x80\x2a\x84\xd0\xc8\x2d\x01\x16\x56\x67\xd5\x7b\x1d\x81\x4d\xc8\xb9\xe7\x29\xda\x48\x9b\x0c\xa2\xc2\xd8\x84\x0c\x6c\xf6\x90\xe0\xd6\xa5\x83\x90\x14\x19\xaa\x12\x21\x43\x91\x48\x45\x60\x08\x43\xdc\xa4\x04\xac\x0b\x23\x08\x74\x54\x52\xc8\x32\xad\x7a\x53\x08\x26\x2e\xd0\x17\x8a\xb4\x21\x28\xd8\x41\x4b\x0b\xc8\xb0\xd7\x85\x39\x00\x81\x35\x85\x4d\x20\x4f\x09\xb9\xe6\x63\x32\x67\x99\xa0\x83\x70\xf9\xd2\x73\x4e\xc2\x52\x08\x5b\x4c\x0b\xe2\x59\x30\x09\x26\x30\x4f\x59\x3b\xb3\x58\x13\xc3\x4e\xda\x44\x17\x16\x18\xf7\x52\xc5\xbf\xc1\xa6\xb0\xb0\x23\xd8\xc9\x34\x75\x6b\x65\x60\xb5\xdf\xe1\xfe\x3a\x98\xc0\xd2\xba\x32\x96\x59\x18\xe2\x5c\x2b\x96\x1b\x99\xda\xbd\xab\x2c\x29\x2e\x8c\x4b\xc3\x18\x12\xf6\x15\x37\x1d\x39\x46\xa5\x63\x48\x79\xaa\xf7\x19\x29\x5b\xa7\xb3\x8c\xdc\x0b\xe0\x5c\x5b\x20\x63\xb4\x61\xd0\x06\xa4\x12\x3a\xcb\x53\xb2\x04\x52\xb9\x7a\xd7\x45\xaa\xc8\x1a\x94\x4c\x80\x0e\xf4\xc7\x6a\x06\x8f\x09\xaa\x27\xfe\x7f\x09\x77\x4b\x91\x54\xd2\x19\xf3\x75\xb9\xb0\xa2\xd8\x79\x4e\x9d\xca\x48\xc7\x06\xf3\x44\x8a\x5a\x6b\x5a\xc1\x2e\x21\x43\x2f\xfa\x02\x34\x54\xa7\x48\x61\x30\x81\x85\xda\x4a\xa3\x95\x4b\xb7\x44\x60\x8b\x31\x95\x45\x93\xaa\x07\xd0\x6a\x40\x19\x82\x93\x5e\x82\x4c\x61\x8b\xb1\xcb\x77\x5d\x45\x2a\xd1\x84\x56\x5c\x64\xb5\x3c\x22\xbb\xc3\x43\x26\xae\x30\x8a\x2d\xaa\xda\x94\x73\x12\x32\x92\xa2\x8d\xa6\x23\xf7\xa2\xb1\x0f\x26\xf0\x55\x92\x41\x23\x92\x3d\xd0\x33\xba\xea\x55\x15\x58\xa0\xb1\x49\x30\x01\x68\x6a\x51\xf0\x94\x90\x6d\xb9\x04\x4d\x46\xf5\x13\x80\x88\xea\x9f\x6d\xf2\x22\x95\xa4\xec\xd4\xd2\x8b\xdb\xa9\x23\x80\xc4\x2c\x98\xfc\x0f\x40\x86\x59\x6b\x55\xa0\xb1\x94\x1e\x83\x52\xa6\x2c\xe4\x46\x87\x85\x70\xbd\x1a\xc2\x3c\x3c\xf5\x23\x97\x0b\xa1\x79\x79\x6a\x33\xa6\x62\xba\x3b\xa4\xfe\x46\x62\x3d\x49\x54\xdb\xed\xe2\xdc\xf8\x4a\x98\x52\x83\xc1\x04\xee\x89\xad\x1b\x03\xbc\x57\x16\x9f\xaf\xe1\xef\x4a\x6b\x33\x3a\x10\x99\xd5\x42\x98\xc9\x5a\x36\xbf\xca\xde\xaf\x1b\x61\x0b\x54\xb0\x21\xb0\x92\xc2\x52\xa2\x8d\x5c\xb5\x01\x54\xd0\x02\x0a\x26\xf0\x93\x00\xdd\x90\x40\x65\xa5\x90\x39\x5a\x6a\x06\xf4\x61\x9f\x58\x60\x9d\x11\xe4\x5a\x96\x2e\x8b\x4a\x70\x95\x26\x6b\xe8\x8d\x2e\x54\xd8\xb8\x5c\xc3\x4d\xaa\x8b\x10\x22\xb7\x68\xf6\xaf\x5d\x48\xc9\x6d\xd3\x92\x57\x7e\xcb\xf9\x1f\x41\x6b\xe3\x1c\xc3\x34\x95\xa8\x25\xfd\x52\x05\x11\xfd\x0a\x0a\x93\xc2\x67\xf8\x90\x58\x9b\xf3\xf5\xc7\x8f\x98\xcb\x99\x70\xce\xb3\x5c\x44\xae\xdf\x33\xa1\xb3\x0f\x2f\x08\xb5\x44\x86\x10\xa8\xf8\x34\xcb\x13\x0e\xf3\x63\x6f\xc6\x4f\x43\x9e\xbc\xe7\xd2\xac\x74\x96\xfa\xe0\x8b\x39\x8a\x2b\x1f\x6f\xcc\xaf\x0e\xde\xad\x92\xdc\x3e\xdc\x7c\x5b\xac\xa6\xab\xc5\xdd\x72\xfd\xb8\xfa\xab\xb7\x28\xa1\x16\x4f\x64\xa6\xcd\x29\xfb\x2b\x48\xdc\x01\xfa\x19\x3e\x54\x2f\x66\xaa\x2b\xbb\xd7\x75\x19\x02\x71\x05\x3a\x01\x69\x97\x67\x08\xc0\xa3\x46\x43\x10\x7d\x85\xba\x79\xb8\x5f\x3f\x7c\x5f\xf4\xab\x46\x2b\xd6\x29\x9d\x34\xa0\x5e\xf7\x2b\xd0\x10\xc8\x60\x81\x86\x00\x7c\x44\x34\x00\xd1\x57\x20\xb7\xd7\x5e\x17\x87\xd4\x76\xd6\x9a\x92\x87\x41\x83\xd9\x09\xbe\xc4\x6c\xda\xb6\x6d\x30\xf2\x44\xa6\x32\xe7\x69\x42\x98\xda\x84\x0b\x69\xa9\xda\x3f\x12\xb3\x7f\xde\x8d\x11\x9e\x62\x84\x23\x31\xba\x48\xbb\x11\x3e\xc8\xb6\x79\xff\x56\xa6\xfe\xfe\xdd\x2c\xbd\xfd\x5f\xcb\xf5\x3d\x6d\x6d\x30\xde\x4a\x76\xd8\x7f\xb8\xa5\x83\x18\x5d\x84\x47\xb5\xf4\xbf\x62\xe9\xed\xdf\x1e\x1e\xef\x69\xe7\xd1\x40\xf1\xd8\x91\xc7\xf6\xc3\xad\xea\x1c\x58\x4d\xd2\xa3\x5a\xe2\x93\x69\xb7\xed\xf9\x52\x9f\x19\xa9\xa3\x73\x3c\x9a\xad\x03\x39\x1e\xdb\x9e\xcf\xf1\xc8\xb6\x6b\x5e\x85\xb4\x1d\x4c\x32\xa4\x2d\xa5\x3a\x2f\x6f\x8c\x6f\x1d\x59\xe3\x30\xba\x49\x8d\xc2\x68\x1f\x50\xb7\x23\x0e\xa8\xb0\xa3\x06\x97\x3f\x18\x7a\xa2\x5c\x7e\x30\x7b\xd0\xb9\xc0\x50\x1c\xa0\x73\x99\xa1\xe4\x41\x65\xc4\xd0\x18\x48\x79\xd4\xe6\x1e\xc0\x1a\xb7\x09\x7b\xc0\xc6\x89\xbf\x7d\x7f\x9d\xaf\x1e\x17\xdf\xfb\xaf\xaf\xe5\xe7\xf0\xe1\x36\x5c\x3d\x4f\xdd\xad\xb5\xfe\xf0\x39\xfd\x70\x39\xb9\xbd\x76\x63\xb8\x4b\x6b\x2f\xc6\xd1\xe5\xb5\xdb\x9f\xbb\x72\x68\x31\xbb\x9b\x3f\x2e\x7e\xce\xfb\x3f\x5d\x62\xb4\xb4\xc3\xd6\x4d\x3f\xde\x95\xbc\x3c\x18\x75\xb9\x7a\x7c\xc5\x75\xb9\x71\x77\xc4\xe3\xbb\x77\x97\x63\x65\xd1\x4d\x7d\x7d\x75\xb3\x5a\xdc\xae\xbd\xc7\x5a\xf5\xc7\x00\x9f\x28\xab\x5e\xbf\xf0\x78\x1b\x8a\x76\xf1\x31\x37\x86\xde\xfb\xc7\x9d\x2f\xbd\xc1\x48\xad\x86\x7e\x9d\xaf\xbd\xd9\x26\x78\x1a\x3b\xc1\x91\x2c\xdb\x13\xe2\x76\x35\x5d\x3f\xfe\x79\xd5\xd9\x58\x46\x15\x6e\xf4\xf3\x61\xaf\x86\x66\xca\xb6\xb8\x3a\xfd\x4c\xac\x5f\x4c\x1b\x8f\x31\x47\xf4\xf7\x87\xbb\xbb\xe5\xfd\x9d\x77\x09\x52\x1d\xc7\x52\xc5\x27\x49\xa4\xda\x2d\x13\x5b\x6d\x7e\xbf\x70\xd7\x7d\x42\xfa\x87\x19\xda\xb0\xa3\x09\xbe\x7f\xd7\x7a\x11\xf4\x0e\x73\xee\x28\x1f\x4d\xce\xff\x5c\xf7\x22\x31\xe6\x70\xf7\x02\xec\xfb\x6b\xe4\xdb\xf2\xcb\xfc\x7e\xee\xad\xea\x27\xb9\x41\x85\x27\xa1\xaa\xe5\x0b\xcb\xf9\x6c\xac\xcb\xe9\xd8\x9f\xd2\xfb\x05\x7c\x9e\xd2\x45\x94\xeb\x4f\xc7\x5f\xb2\xe7\xd3\x1e\xa3\xd5\xf3\x48\x47\x22\xfd\x37\x00\x00\xff\xff\x6b\x1f\x0d\x28\x49\x1d\x00\x00")

func hsdpTomlBytes() ([]byte, error) {
	return bindataRead(
		_hsdpToml,
		"hsdp.toml",
	)
}

func hsdpToml() (*asset, error) {
	bytes, err := hsdpTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hsdp.toml", size: 7497, mode: os.FileMode(420), modTime: time.Unix(1598339458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hsdp.toml": hsdpToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hsdp.toml": &bintree{hsdpToml, map[string]*bintree{}},
}}
