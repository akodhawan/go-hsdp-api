// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// hsdp.toml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hsdpToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdf\x6f\xdb\x36\x10\x7e\x9e\xfe\x8a\x5b\xfc\x3a\x39\x68\xf3\x16\xa0\x18\xb2\xc4\x48\x83\x75\x4d\x61\x67\x28\x86\x21\x28\xce\xd4\x49\x22\x22\x91\x04\x49\xd9\xf1\xfe\xfa\x81\xfa\x11\x4b\xb6\x1c\x51\xb6\xfb\x66\x53\x77\x1f\xef\xbe\xfb\x8e\xe2\x69\x02\x4f\x29\x37\xc0\x0d\x20\x24\x99\x5c\x62\x06\x9a\x12\x6e\xac\xde\x40\x2c\x35\xa8\x62\x99\x71\x06\x9f\x17\x77\xdf\xc0\x90\x5e\x71\x46\x26\x98\x00\x93\xc2\x22\x17\x5c\x24\x90\x4b\x63\xc1\x58\xb4\x9c\xb9\xe5\x98\x27\x85\x46\xcb\xa5\x98\xc2\x83\x35\x90\x23\x17\xa0\x0a\xad\xa4\x21\xb7\x8d\x95\x10\x4c\x40\x53\x54\x30\xea\xda\x83\x42\x8d\x39\x59\xd2\x06\x50\x44\x10\x69\xbe\x22\xc0\xc2\xca\xbc\x7a\x2e\x63\xb0\x29\x39\x77\x95\xa1\x8d\xa5\xce\x21\x2e\xb4\x4d\x49\xc3\x72\x03\x29\xae\x5c\x38\x08\x69\x91\xa3\x28\x11\x72\x64\x29\x17\x04\x9a\x30\xc2\x65\x46\x60\x64\xa1\x19\x81\x8c\xcb\x14\xf2\x5c\x8a\x83\x21\x04\x13\xb7\xd1\x1f\x14\x4b\x4d\x50\x18\x07\xcd\x2d\xa0\x81\x8d\x2c\xf4\x16\x08\xac\x2e\x6c\x0a\x2a\x23\x34\x75\x3e\x3a\x77\x96\x29\x3a\x08\x17\x2f\xbd\x2a\x62\x96\x22\x58\x61\x56\x90\x99\x06\x93\x60\x02\x37\x99\x91\xce\x2c\x91\x64\x60\xcd\x6d\x2a\x0b\x0b\x06\x37\x5c\x24\xbf\xc1\xb2\xb0\xb0\x26\x58\xf3\x2c\x73\x6b\xe5\xc6\x62\xb3\xc6\xcd\x75\x30\x81\x07\xeb\x68\x2c\xa3\xd0\x64\x94\x14\x86\x2f\x79\x66\x37\x8e\x59\x12\xa6\xd0\x2e\x0c\xad\x89\xd9\x9d\xdc\x64\xec\x32\x2a\x1d\x23\x52\x99\xdc\xe4\x24\x6c\x1d\xce\x43\xec\x1e\x80\x51\xd2\x02\x69\x2d\xb5\x01\xa9\x81\x0b\x26\x73\x95\x91\x25\xe0\xc2\xf1\x5d\x93\x54\x25\xab\x91\x1b\x02\x74\xa0\xdf\xe6\x53\x78\x4a\x51\xbc\x98\x5f\x4b\xb8\x3b\x8a\xb9\xe0\xce\xd8\x5c\x97\x0b\x73\x4a\x9c\x67\xe8\x54\x46\x32\xd1\xa8\x52\xce\x6a\xad\x49\x01\xeb\x94\x34\xbd\xe9\x0b\x50\x53\x1d\x22\x45\xc1\x04\x66\x62\xc5\xb5\x14\x2e\xdc\x12\xc1\x58\x4c\xa8\x24\x8d\x8b\x03\x80\x56\x02\xf2\x08\x9c\xf4\x52\x34\x14\xb5\x32\x76\xf1\x2e\xaa\x9d\x4a\x34\x26\x85\x29\xf2\x5a\x1e\xb1\x5d\xe3\x36\x12\x47\x8c\x30\x16\x45\x6d\x6a\x14\x31\x1e\x73\xd6\x46\x93\xb1\x7b\xd0\xd8\x07\x13\xf8\xcc\x49\xa3\x66\xe9\x06\xe8\x15\x1d\x7b\x15\x03\x33\xd4\x36\x0d\x26\x00\x0d\x17\x85\x09\x09\x8d\x2d\x97\xa0\x89\xa8\xfe\x07\xc0\xe2\xfa\x67\x3b\x79\x96\x71\x12\x36\xb4\xf4\xe6\xb6\xef\x08\xc0\x31\x0f\x26\xbf\x00\xf0\x28\x6f\xad\x32\xd4\x96\xb2\x2e\x28\xe5\xc2\x82\xd2\x32\x2a\x98\xab\xd5\x10\xe6\xf6\xdf\x61\xe4\x72\x21\xd2\x6f\xff\xda\x19\x53\x11\xae\xb7\xa1\x1f\x99\xd8\x81\x20\xaa\x76\x3b\x7b\x6e\xe6\x8a\xe9\x52\x83\xc1\x04\xbe\x92\xb1\xee\x18\x30\x1b\x61\xf1\xf5\x1a\xfe\xad\xb4\x36\xa5\x6d\x22\xd3\x5a\x08\x53\x5e\xcb\xe6\xb9\xac\xfd\xa2\x11\x36\x43\x01\x4b\x02\xcb\x29\x2a\x25\xda\xc8\x55\x6a\x40\x01\x2d\xa0\x60\x02\xdf\x09\xd0\x1d\x12\x28\x2c\x67\x5c\xa1\xa5\xe6\x80\xde\xf6\x89\x05\x23\x73\x02\x25\x79\xe9\x32\xab\x04\x57\x69\xb2\x86\x5e\xca\x42\x44\x8d\xcb\x35\xdc\x66\xb2\x88\x20\x76\x8b\x7a\xb3\xeb\x42\x82\xaf\x9a\x92\xec\xf8\x3d\xdc\xfc\x15\xb4\x1a\xa7\x0b\xd3\x30\x51\x4b\xfa\x8d\x05\x16\x3f\x07\xa8\xf8\x8f\x42\x67\xf0\x09\x2e\x52\x6b\x95\xb9\xbe\xbc\x44\xc5\xa7\xcc\x01\x4c\x15\x8b\x5d\xcd\xa7\x4c\xe6\x17\x6f\x28\xb5\x4c\x7c\x50\xa8\xf8\x30\x55\xa9\x89\x54\x17\xc1\xe0\x07\x1f\x6f\xb3\x31\xa5\x69\x09\xc0\xe5\xd6\x1f\x15\xb2\x2b\x5f\x04\x54\x57\x5b\x84\x16\x45\x77\x8f\xb7\x7f\xce\xe6\xe1\x7c\x76\xff\xb0\x78\x9a\xff\x73\x90\xa4\x48\xb2\x17\xd2\x61\xf3\xd6\x7d\x0e\x52\xf7\x42\xfd\x04\x17\xd5\x83\xa9\xe8\x8b\x70\x97\xa3\x21\x10\x47\xd4\x1e\x48\x9b\xa6\x21\x00\x0f\x9e\x86\x20\x0e\x11\x75\xfb\xf8\x75\xf1\xf8\x65\x76\x58\x45\x52\x18\x99\xd1\x73\xb0\x53\x80\x7a\xdd\x8f\xa0\x21\x90\x41\x82\x86\x00\x7c\x84\x34\x00\x71\x88\x20\xd7\x7b\xbb\xe4\x90\x58\x4d\x5b\xa7\xe6\xf6\xe0\xc1\xfc\x39\xe0\x98\xef\xaa\x95\x63\x1e\xb6\xed\x1b\x1c\x95\xf2\x8c\x2b\x13\xa6\x84\x99\x4d\x4d\xc1\x2d\x55\xbd\xc4\xa3\x7d\x8c\x68\x24\x06\x16\x36\x2d\xf6\x1b\xa7\x5c\x1d\x87\x24\x79\xc4\x7e\x74\xaf\x33\xc7\x27\x57\x46\x20\x35\xff\x8f\x2e\xa5\xfb\xf9\xf1\x72\xba\xa6\x2c\x0b\x5f\x84\x5c\x8b\x4b\xa9\x48\xf0\x28\xec\x6c\xf6\x3b\x2a\x1e\xae\x48\x1b\x2e\xc5\xa7\x0f\x17\xbd\xd5\x70\xef\x1a\xaf\x32\x34\x36\xc7\x96\xc0\xdb\xff\x5d\xfa\xbd\x51\x86\xa9\xf7\x84\x3a\x1f\xed\x4d\x73\x9f\xda\x04\x0d\xce\x29\x4d\x30\x88\xe1\xdd\x04\x83\x48\xe3\x9a\x60\x00\xee\xe7\x54\x63\x74\x13\x1c\x5b\x02\x6f\x7f\xaf\x26\x38\x03\xf5\x9e\x50\xe7\xa3\xdd\xbd\x70\x4e\x6d\x80\xce\x4b\xcb\x43\xec\x1d\x7b\x6f\x61\x77\xbc\xc6\x89\xb8\xe5\x7a\x7e\xe6\x46\x8b\xd5\x87\xae\x5e\x5b\x2f\x11\x8e\xa4\xa9\xc7\xed\x7c\x14\x55\x17\x97\xa3\x48\xea\xdc\x62\x06\x48\xea\xd8\x7a\x91\xd4\xf1\xf0\x27\xa9\xe5\xf6\x73\xde\xfe\x11\xad\xbc\x58\x8a\x68\x45\x99\x54\xe5\xb0\x78\xec\x05\x60\x14\xc6\xbb\xac\x8e\x42\x1a\x66\x7b\x04\xdc\xe9\x55\x68\x4f\x10\x37\xf3\xa7\xd9\x97\xc3\x03\x44\xf9\x81\x62\x3b\x8f\x54\xff\x43\x37\x37\xd4\x63\xe8\xfe\x08\xb9\x37\x3f\xf4\x63\xb8\xb1\xe1\x20\x46\x67\x7c\xe8\xf7\x37\x7d\x31\xb4\x32\xbb\xbf\x79\x9a\x7d\xbf\x39\x3c\x3c\x26\x68\x69\x8d\xad\x59\x2b\x59\x97\x79\x79\x64\xd4\xe7\xea\x31\x4f\xf7\xb9\x99\xfe\x1d\xbb\xd3\x4f\x9f\x63\x65\xd1\x9f\xfa\xe2\xea\x76\x3e\xbb\x5b\x78\x4f\x3e\xd5\xa7\x1a\xb3\x37\x5d\xd5\xeb\xe3\xe6\x8d\xc1\x0b\xfe\xd0\x6e\xde\xd7\x6b\xdf\x3b\xed\x98\xf4\x06\xaf\x33\x83\x57\x37\xdf\xf4\x06\x77\x6a\x15\xf4\xf3\xcd\xc2\x3b\xdb\x14\xf7\xf7\x4e\x71\x64\x96\xed\x13\xe2\x6e\x1e\x2e\x9e\xfe\xbe\xea\x2d\xac\x41\x11\x2d\xe5\xeb\xb6\x57\x23\x1d\x1a\x5b\x5c\xed\x0f\xea\xf5\x83\xb0\xf1\x18\xac\x6e\x2b\x84\x2f\x8f\xf7\xf7\x0f\x5f\xef\xbd\x29\xc8\x64\x92\x70\x91\x3c\x07\x5c\x24\x64\xac\xd4\xbb\x67\x78\x26\x93\xe6\xd1\xc7\x71\xc4\xbc\xf0\x25\x0a\xdc\xc5\xab\x56\xcf\x2c\xa4\x51\x59\x9c\x16\xb9\x7f\xb4\x43\x47\xc9\xf1\xd4\x0f\x0a\xc2\x9b\xfa\xd3\x8f\xa8\x71\xd4\x9f\x14\xb9\x7f\xb4\xef\x4d\x2d\xc7\xd3\xde\xb9\x3a\x7b\x53\xdc\xfb\xc9\xae\x77\x38\x18\x47\xa5\x77\x34\xef\x7d\x34\x3c\x31\x86\xce\x3d\xf9\xdd\x18\x3a\x96\xff\x07\x00\x00\xff\xff\xc7\xcc\xa3\xee\x0f\x1e\x00\x00")

func hsdpTomlBytes() ([]byte, error) {
	return bindataRead(
		_hsdpToml,
		"hsdp.toml",
	)
}

func hsdpToml() (*asset, error) {
	bytes, err := hsdpTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hsdp.toml", size: 7695, mode: os.FileMode(420), modTime: time.Unix(1594822591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hsdp.toml": hsdpToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hsdp.toml": &bintree{hsdpToml, map[string]*bintree{}},
}}
