// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// hsdp.toml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hsdpToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xdf\x6f\xdb\x36\x10\x7e\x9e\xfe\x8a\x5b\xfd\x3a\xbb\xe8\xf2\x16\xa0\x0f\x6e\x62\xa4\x46\xbb\xa4\xb0\x33\x14\xc3\x50\x0c\x67\xea\x24\x11\x95\x48\x81\x47\xd9\xf1\x7f\x3f\x50\x3f\x62\x39\x96\x2c\x2a\x31\x30\xec\xcd\xa2\xee\xbe\xbb\xef\xee\xe3\x91\xf2\x04\x1e\x13\xc9\x20\x19\x10\xe2\x54\x6f\x30\x05\x43\xb1\x64\x6b\xf6\x10\x69\x03\x79\xb1\x49\xa5\x80\xcf\xeb\xdb\x6f\xc0\x64\xb6\x52\x10\x07\x13\x10\x5a\x59\x94\x4a\xaa\x18\x32\xcd\x16\xd8\xa2\x95\xc2\x2d\x47\x32\x2e\x0c\x5a\xa9\xd5\x0c\x96\x96\x21\x43\xa9\x20\x2f\x4c\xae\x99\x5c\x18\xab\x21\x98\x80\xa1\xb0\x10\x74\x6c\x0f\x39\x1a\xcc\xc8\x92\x61\x40\x15\x42\x68\xe4\x96\x00\x0b\xab\xb3\xea\xbd\x8e\xc0\x26\xe4\xdc\xf3\x14\x6d\xa4\x4d\x06\x51\x61\x6c\x42\x06\x36\x7b\x48\x70\xeb\xd2\x41\x48\x8a\x0c\x55\x89\x90\xa1\x48\xa4\x22\x30\x84\x21\x6e\x52\x02\xd6\x85\x11\x04\x3a\x2a\x29\x64\x99\x56\xbd\x29\x04\x13\x17\xe8\x13\x45\xda\x10\x14\xec\xa0\xa5\x05\x64\xd8\xeb\xc2\x1c\x80\xc0\x9a\xc2\x26\x90\xa7\x84\x5c\xf3\x31\x99\xb3\x4c\xd0\x41\xb8\x7c\xe9\x29\x27\x61\x29\x84\x2d\xa6\x05\xf1\x2c\x98\x04\x13\x98\xa7\xac\x9d\x59\xac\x89\x61\x27\x6d\xa2\x0b\x0b\x8c\x7b\xa9\xe2\xdf\x60\x53\x58\xd8\x11\xec\x64\x9a\xba\xb5\x32\xb0\xda\xef\x70\x7f\x1d\x4c\x60\x69\x5d\x19\xcb\x2c\x0c\x71\xae\x15\xcb\x8d\x4c\xed\xde\x55\x96\x14\x17\xc6\xa5\x61\x0c\x09\xfb\x82\x9b\x8e\x1c\xa3\xd2\x31\xa4\x3c\xd5\xfb\x8c\x94\xad\xd3\x59\x46\xee\x05\x70\xae\x2d\x90\x31\xda\x30\x68\x03\x52\x09\x9d\xe5\x29\x59\x02\xa9\x5c\xbd\xeb\x22\x55\x64\x0d\x4a\x26\x40\x07\xfa\x6d\x35\x83\xc7\x04\xd5\x4f\xfe\xb5\x84\xbb\xa5\x48\x2a\xe9\x8c\xf9\xba\x5c\x58\x51\xec\x3c\xa7\x4e\x65\xa4\x63\x83\x79\x22\x45\xad\x35\xad\x60\x97\x90\xa1\x67\x7d\x01\x1a\xaa\x53\xa4\x30\x98\xc0\x42\x6d\xa5\xd1\xca\xa5\x5b\x22\xb0\xc5\x98\xca\xa2\x49\xd5\x03\x68\x35\xa0\x0c\xc1\x49\x2f\x41\xa6\xb0\xc5\xd8\xe5\xbb\xae\x22\x95\x68\x42\x2b\x2e\xb2\x5a\x1e\x91\xdd\xe1\x21\x13\x57\x18\xc5\x16\x55\x6d\xca\x39\x09\x19\x49\xd1\x46\xd3\x91\x7b\xd1\xd8\x07\x13\xf8\x2c\xc9\xa0\x11\xc9\x1e\xe8\x09\x5d\xf5\xaa\x0a\x2c\xd0\xd8\x24\x98\x00\x34\xb5\x28\x78\x4a\xc8\xb6\x5c\x82\x26\xa3\xfa\x09\x40\x44\xf5\xcf\x36\x79\x91\x4a\x52\x76\x6a\xe9\xd9\xed\xd4\x11\x40\x62\x16\x4c\x7e\x01\x90\x61\xd6\x5a\x15\x68\x2c\xa5\xc7\xa0\x94\x29\x0b\xb9\xd1\x61\x21\x5c\xaf\x86\x30\x0f\x4f\xfd\xc8\xe5\x42\x68\x9e\x9f\xda\x8c\xa9\x98\xee\x0e\xa9\xbf\x92\x58\x4f\x12\xd5\x76\xbb\x38\x37\xbe\x12\xa6\xd4\x60\x30\x81\x7b\x62\xeb\xc6\x00\xef\x95\xc5\xa7\x6b\xf8\xbb\xd2\xda\x8c\x0e\x44\x66\xb5\x10\x66\xb2\x96\xcd\x8f\xb2\xf7\xeb\x46\xd8\x02\x15\x6c\x08\xac\xa4\xb0\x94\x68\x23\x57\x6d\x00\x15\xb4\x80\x82\x09\x7c\x27\x40\x37\x24\x50\x59\x29\x64\x8e\x96\x9a\x01\x7d\xd8\x27\x16\x58\x67\x04\xb9\x96\xa5\xcb\xa2\x12\x5c\xa5\xc9\x1a\x7a\xa3\x0b\x15\x36\x2e\xd7\x70\x93\xea\x22\x84\xc8\x2d\x9a\xfd\x4b\x17\x52\x72\xdb\xb4\xe4\x85\xdf\x72\xfe\x47\xd0\xda\x38\xc7\x30\x4d\x25\x6a\x49\x3f\x57\x41\x44\x3f\x82\xc2\xa4\xf0\x11\xde\x25\xd6\xe6\x7c\xfd\xfe\x3d\xe6\x72\x26\x9c\xf3\x2c\x17\x91\xeb\xf7\x4c\xe8\xec\xdd\x33\x42\x2d\x91\x21\x04\x2a\x3e\xcc\xf2\x84\xc3\xfc\xd8\x9b\xf1\xc3\x90\x27\xef\xb9\x34\x2b\x9d\xa5\x3e\xf8\x62\x8e\xe2\xca\xc7\x1b\xf3\xab\x83\x77\xab\x24\xb7\x0f\x37\x5f\x16\xab\xe9\x6a\x71\xb7\x5c\x3f\xae\xfe\xea\x2d\x4a\xa8\xc5\x4f\x32\xd3\xe6\x94\xfd\x11\x24\xee\x00\xfd\x08\xef\xaa\x17\x33\xd5\x95\xdd\xcb\xba\x0c\x81\xb8\x02\x9d\x80\xb4\xcb\x33\x04\xe0\x51\xa3\x21\x88\xbe\x42\xdd\x3c\xdc\xaf\x1f\xbe\x2e\xfa\x55\xa3\x15\xeb\x94\x4e\x1a\x50\xaf\xfb\x15\x68\x08\x64\xb0\x40\x43\x00\x3e\x22\x1a\x80\xe8\x2b\x90\xdb\x6b\x2f\x8b\x43\x6a\x3b\x6b\x4d\xc9\xc3\xa0\xc1\xec\x04\x5f\x62\x36\x6d\xdb\x36\x18\x79\x22\x53\x99\xf3\x34\x21\x4c\x6d\xc2\x85\xb4\x54\xed\x1f\x89\xd9\x3f\x6f\xc6\x08\x4f\x31\xc2\x91\x18\x5d\xa4\xdd\x08\x1f\x64\xdb\xbc\x7f\x2d\x53\x7f\xff\x6e\x96\xde\xfe\x2f\xe5\xfa\x5f\xb4\xf5\xad\x64\xdb\x39\x34\x3c\x46\x11\xfe\x5f\xb5\xd4\x9b\xa1\x1b\x08\x6f\x69\xe7\xd1\x40\xf1\xd8\x91\xc7\xf6\xc3\xad\xea\x1c\x58\x4d\xd2\xa3\x5a\xe2\x93\x69\xb7\xed\xf9\x52\x9f\x19\xa9\xa3\x73\x3c\x9a\xad\x03\x39\x1e\xdb\x9e\xcf\xf1\xc8\xb6\x6b\x5e\x85\xb4\x1d\x4c\x32\xa4\x2d\xa5\x3a\x2f\x6f\x8c\xaf\xd5\xf7\x38\x8c\x6e\x52\xa3\x30\xda\x07\xd4\xed\x88\x03\x2a\xec\xa8\xc1\xe5\x0f\x86\x9e\x28\x97\x1f\xcc\x1e\x74\x2e\x30\x14\x07\xe8\x5c\x66\x28\x79\x50\x19\x31\x34\x06\x52\x1e\xb5\xb9\x07\xb0\xc6\x6d\xc2\x1e\xb0\x71\xe2\x6f\xdf\x5f\xe7\xab\xc7\xc5\xd7\xfe\xeb\x6b\xf9\x39\x7c\xb8\x0d\x57\xcf\x53\x77\x6b\xad\x3f\x7c\x4e\x3f\x5c\x4e\x6e\xaf\xdd\x18\xee\xd2\xda\x8b\x71\x74\x79\xed\xf6\xe7\xae\x1c\x5a\xcc\xee\xe6\x8f\x8b\xef\xf3\xfe\x4f\x97\x18\x2d\xed\xb0\x75\xd3\x8f\x77\x25\x2f\x0f\x46\x5d\xae\x1e\x5f\x71\x5d\x6e\xdc\x1d\xf1\xf8\xee\xdd\xe5\x58\x59\x74\x53\x5f\x5f\xdd\xac\x16\xb7\x6b\xef\xb1\x56\xfd\x31\xc0\x27\xca\xaa\xd7\x2f\x3c\xde\x86\xa2\x5d\x7c\xcc\x8d\xa1\xf7\xf6\x71\xe7\x4b\x6f\x30\x52\xab\xa1\x9f\xe7\x6b\x6f\xb6\x09\x9e\xc6\x4e\x70\x24\xcb\xf6\x84\xb8\x5d\x4d\xd7\x8f\x7f\x5e\x75\x36\x96\x51\x85\x1b\xfd\x74\xd8\xab\xa1\x99\xb2\x2d\xae\x4e\x3f\x13\xeb\x17\xd3\xc6\x63\xcc\x11\xfd\xf5\xe1\xee\x6e\x79\x7f\xe7\x5d\x82\x54\xc7\xb1\x54\xf1\x49\x12\xa9\x76\xcb\xc4\x56\x9b\xdf\x2f\xdc\x75\x9f\x90\xfe\x61\x86\x36\xec\x68\x82\x6f\xdf\xb5\x5e\x04\xbd\xc3\x9c\x3b\xca\x47\x93\xf3\x3f\xd7\xbd\x48\x8c\x39\xdc\xbd\x00\xfb\xfe\x1a\xf9\xb2\xfc\x34\xbf\x9f\x7b\xab\xfa\xa7\xdc\xa0\xc2\x93\x50\xd5\xf2\x85\xe5\x7c\x36\xd6\xe5\x74\xec\x4f\xe9\xed\x02\x3e\x4f\xe9\x22\xca\xf5\xa7\xe3\x2f\xd9\xf3\x69\x8f\xd1\xea\x79\xa4\x23\x91\xfe\x1b\x00\x00\xff\xff\x36\x0a\x50\x55\x49\x1d\x00\x00")

func hsdpTomlBytes() ([]byte, error) {
	return bindataRead(
		_hsdpToml,
		"hsdp.toml",
	)
}

func hsdpToml() (*asset, error) {
	bytes, err := hsdpTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hsdp.toml", size: 7497, mode: os.FileMode(420), modTime: time.Unix(1598337157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hsdp.toml": hsdpToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hsdp.toml": &bintree{hsdpToml, map[string]*bintree{}},
}}
