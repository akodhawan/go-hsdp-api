// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// hsdp.toml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hsdpToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4d\x6f\xe3\x46\x0c\x3d\x57\xbf\x82\x8d\xaf\x95\x83\xdd\xdc\x02\x2c\x8a\x34\x31\xb2\x41\xb7\x9b\x85\x9d\xa2\x28\x8a\x60\x41\x8f\x28\x8b\x88\x34\x23\xcc\x87\x1d\xf7\xd7\x17\x23\x4b\xb1\xe4\x8f\xd5\x28\x76\x6f\xd6\x88\x7c\x43\x3e\x3e\xce\x50\x1e\xc1\x53\xc6\x06\xd8\x00\xc2\x22\x57\x73\xcc\x41\xd3\x82\x8d\xd5\x6b\x48\x95\x86\xd2\xcd\x73\x16\xf0\x79\x76\xf7\x0d\x0c\xe9\x25\x0b\x32\xd1\x08\x84\x92\x16\x59\xb2\x5c\x40\xa1\x8c\x05\x63\xd1\xb2\xf0\xcb\x29\x2f\x9c\x46\xcb\x4a\x8e\xe1\xc1\x1a\x28\x90\x25\x94\x4e\x97\xca\x90\xdf\xc6\x2a\x88\x46\xa0\x29\x71\x82\xba\xf6\x50\xa2\xc6\x82\x2c\x69\x03\x28\x13\x48\x34\x2f\x09\xd0\x59\x55\x6c\xde\xab\x14\x6c\x46\xde\xbd\xcc\xd1\xa6\x4a\x17\x90\x3a\x6d\x33\xd2\x30\x5f\x43\x86\x4b\x1f\x0e\x42\xe6\x0a\x94\x15\x42\x81\x22\x63\x49\xa0\x09\x13\x9c\xe7\x04\x46\x39\x2d\x08\x54\x5a\xa5\x50\x14\x4a\x1e\x0d\x21\x1a\xf9\x8d\x7e\xa3\x54\x69\x02\x67\x3c\x34\x5b\x40\x03\x6b\xe5\xf4\x16\x08\xac\x76\x36\x83\x32\x27\x34\x75\x3e\xba\xf0\x96\x19\x7a\x08\x1f\x2f\xbd\x96\x24\x2c\x25\xb0\xc4\xdc\x91\x19\x47\xa3\x68\x04\x37\xb9\x51\xde\x6c\xa1\xc8\xc0\x8a\x6d\xa6\x9c\x05\x83\x6b\x96\x8b\x5f\x60\xee\x2c\xac\x08\x56\x9c\xe7\x7e\xad\xda\x58\xae\x57\xb8\xbe\x8e\x46\xf0\x60\x3d\x8d\x55\x14\x9a\x4c\xa9\xa4\xe1\x39\xe7\x76\xed\x99\x25\x69\x9c\xf6\x61\x68\x4d\xc2\xee\xe4\xa6\x52\x9f\x51\xe5\x98\x50\x99\xab\x75\x41\xd2\xd6\xe1\x3c\xa4\xfe\x05\x98\x52\x59\x20\xad\x95\x36\xa0\x34\xb0\x14\xaa\x28\x73\xb2\x04\x2c\x3d\xdf\x35\x49\x9b\x64\x35\xb2\x21\x40\x0f\xfa\x6d\x3a\x86\xa7\x0c\xe5\x8b\xf9\xb9\x82\xbb\xa3\x94\x25\x7b\x63\x73\x5d\x2d\x4c\x69\xe1\x3d\x63\xaf\x32\x52\x0b\x8d\x65\xc6\xa2\xd6\x9a\x92\xb0\xca\x48\xd3\x9b\xbe\x00\x35\xd5\x21\x52\x12\x8d\x60\x22\x97\xac\x95\xf4\xe1\x56\x08\xc6\xe2\x82\x2a\xd2\x58\x1e\x01\xb4\x0a\x90\x13\xf0\xd2\xcb\xd0\x50\xd2\xca\xd8\xc7\x3b\xdb\xec\x54\xa1\x09\x25\x8d\x2b\x6a\x79\xa4\x76\x85\xdb\x48\x3c\x31\xd2\x58\x94\xb5\xa9\x29\x49\x70\xca\xa2\x8d\xa6\x52\xff\xa2\xb1\x8f\x46\xf0\x99\x49\xa3\x16\xd9\x1a\xe8\x15\x3d\x7b\x1b\x06\x26\xa8\x6d\x16\x8d\x00\x1a\x2e\x9c\x89\x09\x8d\xad\x96\xa0\x89\xa8\x7e\x02\x10\x69\xfd\xb3\x9d\xbc\xc8\x99\xa4\x8d\x2d\xbd\xb9\xed\x3b\x02\x30\x16\xd1\xe8\x27\x00\x4e\x8a\xd6\xaa\x40\x6d\x29\xef\x82\x52\x21\x2d\x94\x5a\x25\x4e\xf8\x5a\xf5\x61\x6e\x9f\x8e\x23\x57\x0b\x89\x7e\x7b\x6a\x67\x4c\x2e\x5e\x6d\x43\x7f\x67\x62\x47\x82\xd8\xb4\xdb\xd9\x73\x33\x57\x42\x57\x1a\x8c\x46\xf0\x95\x8c\xf5\xc7\x80\x59\x4b\x8b\xaf\xd7\xf0\xcf\x46\x6b\x63\xda\x26\x32\xae\x85\x30\xe6\x5a\x36\xcf\x55\xed\x67\x8d\xb0\x05\x4a\x98\x13\x58\xa6\xa4\x92\x68\x23\x57\xa5\x01\x25\xb4\x80\xa2\x11\xfc\x45\x80\xfe\x90\x40\x69\x59\x70\x89\x96\x9a\x03\x7a\xdb\x27\x16\x8c\x2a\x08\x4a\xc5\x95\xcb\x64\x23\xb8\x8d\x26\x6b\xe8\xb9\x72\x32\x69\x5c\xae\xe1\x36\x57\x2e\x81\xd4\x2f\xea\xf5\xae\x0b\x49\x5e\x36\x25\xd9\xf1\x7b\xb8\xf9\x23\x6a\x35\x4e\x17\xa6\x61\xa2\x96\xf4\x1b\x0b\x22\x7d\x8e\xb0\xe4\xef\x4e\xe7\xf0\x09\x2e\x32\x6b\x4b\x73\x7d\x79\x89\x25\x8f\x85\x07\x18\x97\x22\xf5\x35\x1f\x0b\x55\x5c\xbc\xa1\xd4\x32\x09\x41\x21\xf7\x61\x5c\x66\x26\x29\xbb\x08\x06\x3f\x84\x78\x9b\xb5\xa9\x4c\x2b\x00\x56\x5b\x7f\x2c\xaf\x42\xfd\xbd\xe9\x9b\x7f\x8b\xa0\xbb\xc7\xdb\xdf\x27\xd3\x78\x3a\xb9\x7f\x98\x3d\x4d\xff\x3e\x4a\x51\xa2\xc4\x0b\xe9\xb8\xb9\x73\x9f\xa3\xcc\x5f\xa7\x9f\xe0\x62\xf3\x62\x2c\x0f\xc5\xb7\xcb\x50\x1f\x88\xa7\x69\x0f\xa4\x4d\x52\x1f\x40\x2f\x4b\x7d\x00\xc7\x68\xba\x7d\xfc\x3a\x7b\xfc\x32\x39\xae\x20\x25\x8d\xca\xe9\x39\xda\xa1\xbf\x5e\x0f\xa3\xa7\x0f\xa4\x97\x9e\x3e\x80\x7e\x11\xf5\x00\x1c\xa3\xc7\x77\xdd\x2e\x35\x24\x97\xe3\xd6\x79\xb9\x3d\x72\xb0\x78\x8e\x18\x8b\x5d\xa5\x32\x16\x71\xdb\xbe\xc1\x29\x33\xce\xb9\x34\x71\x46\x98\xdb\xcc\x38\xb6\xb4\xe9\x22\x4e\xf6\x31\x92\x81\x18\xe8\x6c\xe6\xf6\x9b\xa6\x5a\x1d\x86\xa4\x38\x11\xdf\xbb\x83\xcc\xfb\x93\xab\x22\x50\x9a\xff\xa5\x4b\xe5\x7f\x7e\xbc\x1c\xaf\x28\xcf\xe3\x17\xa9\x56\xf2\x52\x95\x24\x39\x89\x3b\x9b\xfd\x8a\x25\xc7\x4b\xd2\x86\x95\xfc\xf4\xe1\xe2\x60\x35\xfc\x2d\x13\x54\x86\xc6\xe6\xbd\x25\x08\xf6\xff\x21\xfd\xc1\x28\xfd\xd4\x07\x42\x9d\x8f\xf6\xa6\xb5\x4f\x6d\x82\x06\xe7\x94\x26\xe8\xc5\x08\x6e\x82\x5e\xa4\x61\x4d\xd0\x03\xf7\xff\x54\x63\x70\x13\xbc\xb7\x04\xc1\xfe\x41\x4d\x70\x06\xea\x03\xa1\xce\x47\xbb\xbf\x6e\x4e\x6d\x80\xce\x95\x15\x20\xf6\x8e\x7d\xb0\xb0\x3b\x5e\xc3\x44\xdc\x72\x3d\x3f\x73\x83\xc5\x1a\x42\xd7\x41\xdb\x20\x11\x0e\xa4\xe9\x80\xdb\xf9\x28\xf2\xa3\xc8\xbb\x28\xea\xcc\x30\x3d\x14\x75\x6c\x83\x28\xea\x78\x84\x53\xd4\x72\x3b\x9d\xa2\xf6\xdc\x7a\x33\x7d\x9a\x7c\x39\x3e\xb6\x56\x9f\xc4\xdb\x29\x78\xf3\x1c\xfb\x69\xb5\xfe\xf0\xd9\xff\x68\xd9\x9b\x5a\x0f\x63\xf8\x61\x75\x0f\xa3\x15\xd9\xec\xea\x76\x3a\xb9\x9b\x05\x8f\x8d\x9b\x2f\x5c\xb3\x37\x9a\xd6\xeb\xc3\x86\xb5\xde\xe9\xa8\x6f\xb7\xe0\xd9\x24\x74\x20\x18\x92\x5e\xef\x5d\xd0\x7b\xef\x85\xa6\xd7\xbb\x53\xab\xa0\x9f\x6f\x66\xc1\xd9\x66\xb8\xbf\x77\x86\x03\xb3\x6c\xcb\xfc\x6e\x1a\xcf\x9e\xfe\xbc\x3a\x58\x58\x83\x32\x99\xab\xd7\xad\x60\x13\x1d\x1b\xeb\xae\xf6\xbf\x72\xea\x17\x71\xe3\xd1\x5b\xdd\x56\x08\x5f\x1e\xef\xef\x1f\xbe\xde\x07\x53\x90\xab\xc5\x82\xe5\xe2\x39\x62\xb9\x20\x63\x95\xde\x3d\x58\x72\xb5\x68\x5e\x7d\x1c\x46\xcc\x0b\xcf\x51\xe2\x2e\xde\x66\xf5\xcc\x42\x1a\x94\xc5\x69\x91\x87\x47\xdb\x77\x94\xbc\x9f\xfa\x5e\x41\x04\x53\x7f\xfa\x11\x35\x8c\xfa\x93\x22\x0f\x8f\xf6\x47\x23\xdf\xfb\x69\xef\xcc\x1d\xc1\x14\x1f\xfc\xb7\xe3\xe0\x64\x35\x8c\xca\xe0\x68\x8e\xff\xdf\x72\x62\x04\x9d\x21\xe3\x87\x11\xb4\x2d\xff\x0b\x00\x00\xff\xff\xb9\x00\x79\x0a\x43\x1b\x00\x00")

func hsdpTomlBytes() ([]byte, error) {
	return bindataRead(
		_hsdpToml,
		"hsdp.toml",
	)
}

func hsdpToml() (*asset, error) {
	bytes, err := hsdpTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hsdp.toml", size: 6979, mode: os.FileMode(420), modTime: time.Unix(1593686190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hsdp.toml": hsdpToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hsdp.toml": &bintree{hsdpToml, map[string]*bintree{}},
}}
