// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// hsdp.toml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hsdpToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xdf\x6f\xdb\x36\x10\x7e\x9e\xfe\x8a\x5b\xfd\x3a\xbb\xe8\xf2\x16\xa0\x0f\x6e\x62\xa4\x46\xbb\xa4\xb0\x33\x14\xc3\x50\x0c\x67\xea\x24\x11\x95\x48\x81\x47\xd9\xf1\x7f\x3f\x50\x3f\x62\x39\x96\x2c\x2a\x31\x30\xec\xcd\xa2\x78\xdf\xdd\xf7\xf1\xe3\x91\xf2\x04\x1e\x13\xc9\x20\x19\x10\xe2\x54\x6f\x30\x05\x43\xb1\x64\x6b\xf6\x10\x69\x03\x79\xb1\x49\xa5\x80\xcf\xeb\xdb\x6f\xc0\x64\xb6\x52\x10\x07\x13\x10\x5a\x59\x94\x4a\xaa\x18\x32\xcd\x16\xd8\xa2\x95\xc2\x0d\x47\x32\x2e\x0c\x5a\xa9\xd5\x0c\x96\x96\x21\x43\xa9\x20\x2f\x4c\xae\x99\x5c\x1a\xab\x21\x98\x80\xa1\xb0\x10\x74\x3c\x1f\x72\x34\x98\x91\x25\xc3\x80\x2a\x84\xd0\xc8\x2d\x01\x16\x56\x67\xd5\x7b\x1d\x81\x4d\xc8\x85\xe7\x29\xda\x48\x9b\x0c\xa2\xc2\xd8\x84\x0c\x6c\xf6\x90\xe0\xd6\x95\x83\x90\x14\x19\xaa\x12\x21\x43\x91\x48\x45\x60\x08\x43\xdc\xa4\x04\xac\x0b\x23\x08\x74\x54\x52\xc8\x32\xad\x7a\x4b\x08\x26\x2e\xd1\x27\x8a\xb4\x21\x28\xd8\x41\x4b\x0b\xc8\xb0\xd7\x85\x39\x00\x81\x35\x85\x4d\x20\x4f\x09\xb9\xe6\x63\x32\x37\x33\x41\x07\xe1\xea\xa5\xa7\x9c\x84\xa5\x10\xb6\x98\x16\xc4\xb3\x60\x12\x4c\x60\x9e\xb2\x76\xd3\x62\x4d\x0c\x3b\x69\x13\x5d\x58\x60\xdc\x4b\x15\xff\x06\x9b\xc2\xc2\x8e\x60\x27\xd3\xd4\x8d\x95\x89\xd5\x7e\x87\xfb\xeb\x60\x02\x4b\xeb\x64\x2c\xab\x30\xc4\xb9\x56\x2c\x37\x32\xb5\x7b\xa7\x2c\x29\x2e\x8c\x2b\xc3\x18\x12\xf6\x05\x37\x1d\x39\x46\x65\x60\x48\x79\xaa\xf7\x19\x29\x5b\x97\xb3\x8c\xdc\x0b\xe0\x5c\x5b\x20\x63\xb4\x61\xd0\x06\xa4\x12\x3a\xcb\x53\xb2\x04\x52\x39\xbd\x6b\x91\x2a\xb2\x06\x25\x13\xa0\x03\xfd\xb6\x9a\xc1\x63\x82\xea\x27\xff\x5a\xc2\xdd\x52\x24\x95\x74\x93\xf9\xba\x1c\x58\x51\xec\x22\xa7\xce\x65\xa4\x63\x83\x79\x22\x45\xed\x35\xad\x60\x97\x90\xa1\x67\x7f\x01\x1a\xaa\x4b\xa4\x30\x98\xc0\x42\x6d\xa5\xd1\xca\x95\x5b\x22\xb0\xc5\x98\x4a\xd1\xa4\xea\x01\xb4\x1a\x50\x86\xe0\xac\x97\x20\x53\xd8\x62\xec\xea\x5d\x57\x99\x4a\x34\xa1\x15\x17\x59\x6d\x8f\xc8\xee\xf0\x50\x89\x13\x46\xb1\x45\x55\x4f\xe5\x9c\x84\x8c\xa4\x68\xa3\xe9\xc8\xbd\x68\xe6\x07\x13\xf8\x2c\xc9\xa0\x11\xc9\x1e\xe8\x09\x9d\x7a\x95\x02\x0b\x34\x36\x09\x26\x00\x8d\x16\x05\x4f\x09\xd9\x96\x43\xd0\x54\x54\x3f\x01\x88\xa8\xfe\xd9\x26\x2f\x52\x49\xca\x4e\x2d\x3d\x87\x9d\x06\x02\x48\xcc\x82\xc9\x2f\x00\x32\xcc\x5a\xa3\x02\x8d\xa5\xf4\x18\x94\x32\x65\x21\x37\x3a\x2c\x84\x5b\xab\x21\xcc\xc3\x53\x3f\x72\x39\x10\x9a\xe7\xa7\x36\x63\x2a\xa6\xbb\x43\xe9\xaf\x24\xd6\x53\x44\xb5\xdd\x2e\xce\x8d\xaf\x84\x29\x3d\x18\x4c\xe0\x9e\xd8\xba\x36\xc0\x7b\x65\xf1\xe9\x1a\xfe\xae\xbc\x36\xa3\x03\x91\x59\x6d\x84\x99\xac\x6d\xf3\xa3\x5c\xfb\x75\x63\x6c\x81\x0a\x36\x04\x56\x52\x58\x5a\xb4\xb1\xab\x36\x80\x0a\x5a\x40\xc1\x04\xbe\x13\xa0\x6b\x12\xa8\xac\x14\x32\x47\x4b\x4d\x83\x3e\xec\x13\x0b\xac\x33\x82\x5c\xcb\x32\x64\x51\x19\xae\xf2\x64\x0d\xbd\xd1\x85\x0a\x9b\x90\x6b\xb8\x49\x75\x11\x42\xe4\x06\xcd\xfe\x65\x08\x29\xb9\x6d\x96\xe4\x45\xdc\x72\xfe\x47\xd0\xda\x38\xc7\x30\x8d\x12\xb5\xa5\x9f\x55\x10\xd1\x8f\xa0\x30\x29\x7c\x84\x77\x89\xb5\x39\x5f\xbf\x7f\x8f\xb9\x9c\x09\x17\x3c\xcb\x45\xe4\xd6\x7b\x26\x74\xf6\xee\x19\xa1\xb6\xc8\x10\x02\x15\x1f\x66\x79\xc2\x61\x7e\x1c\xcd\xf8\x61\x28\x92\xf7\x5c\x4e\x2b\x83\xa5\x3e\xc4\x62\x8e\xe2\xca\x27\x1a\xf3\xab\x43\x74\x4b\x92\xdb\x87\x9b\x2f\x8b\xd5\x74\xb5\xb8\x5b\xae\x1f\x57\x7f\xf5\x8a\x12\x6a\xf1\x93\xcc\xb4\x39\x65\x7f\x04\x89\x3b\x40\x3f\xc2\xbb\xea\xc5\x4c\x75\x55\xf7\x52\x97\x21\x10\x27\xd0\x09\x48\x5b\x9e\x21\x00\x0f\x8d\x86\x20\xfa\x84\xba\x79\xb8\x5f\x3f\x7c\x5d\xf4\xbb\x46\x2b\xd6\x29\x9d\x2c\x40\x3d\xee\x27\xd0\x10\xc8\xa0\x40\x43\x00\x3e\x26\x1a\x80\xe8\x13\xc8\xed\xb5\x97\xe2\x90\xda\xce\x5a\x5d\xf2\xd0\x68\x30\x3b\xc1\x97\x98\x4d\xdb\x73\x1b\x8c\x3c\x91\xa9\xcc\x79\x9a\x10\xa6\x36\xe1\x42\x5a\xaa\xf6\x8f\xc4\xec\x9f\x37\x63\x84\xa7\x18\xe1\x48\x8c\x2e\xd2\xae\x85\x0f\xb2\x6d\xde\xbf\x96\xa9\x7f\x7c\x37\x4b\xef\xf8\x97\x76\x1d\xbb\xac\xff\x35\xd1\x76\xad\x0d\x87\x51\x64\xff\x57\xcb\xe9\xcd\xd0\x35\x83\xb7\xec\xd0\xa3\x66\xe2\xb1\x1b\x8f\xe7\x0f\x2f\x55\x67\xb3\x6a\x8a\x1e\xb5\x24\x3e\x95\x76\xcf\x3d\x2f\xf5\x99\x76\x3a\xba\xc6\xa3\xbe\x3a\x50\xe3\xf1\xdc\xf3\x35\x1e\xcd\xed\xea\x55\x21\x6d\x07\x8b\x0c\x69\x4b\xa9\xce\xcb\xdb\xe2\x6b\xfd\x3d\x0e\xa3\x9b\xd4\x28\x8c\xf6\xe1\x74\x3b\xe2\x70\x0a\x3b\x34\xb8\xfc\xa1\xd0\x93\xe5\xf2\x4d\xd9\x83\xce\x05\x9a\xe2\x00\x9d\xcb\x34\x25\x0f\x2a\x23\x9a\xc6\x40\xc9\xa3\x36\xf7\x00\xd6\xb8\x4d\xd8\x03\x36\xce\xfc\xed\xbb\xeb\x7c\xf5\xb8\xf8\xda\x7f\x75\x2d\x3f\x85\x0f\x37\xe1\xea\x79\xea\x6e\xac\xf5\x47\xcf\xe9\x47\xcb\xc9\xcd\xb5\x1b\xc3\x5d\x58\x7b\x31\x8e\x2e\xae\xdd\xf1\xdc\x55\x43\x8b\xd9\xdd\xfc\x71\xf1\x7d\xde\xff\xd9\x12\xa3\xa5\x1d\xb6\x6e\xf9\xf1\xae\xe4\xe5\xc1\xa8\x2b\xd4\xe3\x0b\xae\x2b\x8c\xbb\x33\x1e\xdf\xbb\xbb\x02\xab\x19\xdd\xd4\xd7\x57\x37\xab\xc5\xed\xda\xbb\xad\x55\x7f\x0a\xf0\x89\xb3\xea\xf1\x0b\xb7\xb7\xa1\x6c\x17\x6f\x73\x63\xe8\xbd\xbd\xdd\xf9\xd2\x1b\xcc\xd4\x5a\xd0\xcf\xf3\xb5\x37\xdb\x04\x4f\x73\x27\x38\x92\x65\xbb\x43\xdc\xae\xa6\xeb\xc7\x3f\xaf\x3a\x17\x96\x51\x85\x1b\xfd\x74\xd8\xab\xa1\x99\xb2\x2d\xae\x4e\x3f\x11\xeb\x17\xd3\x26\x62\xcc\x11\xfd\xf5\xe1\xee\x6e\x79\x7f\xe7\x2d\x41\xaa\xe3\x58\xaa\xf8\xa4\x88\x54\xbb\x61\x62\xab\xcd\xef\x17\x5e\x75\x9f\x94\xfe\x69\x86\x36\xec\x68\x82\x6f\xdf\xb5\x5e\x04\xbd\xd3\x9c\x3b\xca\x47\x93\xf3\x3f\xd7\xbd\x48\x8c\x39\xdc\xbd\x00\xfb\xfe\x16\xf9\xb2\xfc\x34\xbf\x9f\x7b\xbb\xfa\xa7\xdc\xa0\xc2\x93\x54\xd5\xf0\x85\xed\x7c\x36\xd7\xe5\x7c\xec\x4f\xe9\xed\x06\x3e\x4f\xe9\x22\xce\xf5\xa7\xe3\x6f\xd9\xf3\x65\x8f\xf1\xea\x79\xa4\x23\x93\xfe\x1b\x00\x00\xff\xff\xff\xb6\xb8\x8a\x45\x1d\x00\x00")

func hsdpTomlBytes() ([]byte, error) {
	return bindataRead(
		_hsdpToml,
		"hsdp.toml",
	)
}

func hsdpToml() (*asset, error) {
	bytes, err := hsdpTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hsdp.toml", size: 7493, mode: os.FileMode(420), modTime: time.Unix(1597598777, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hsdp.toml": hsdpToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hsdp.toml": &bintree{hsdpToml, map[string]*bintree{}},
}}
