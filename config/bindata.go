// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// hsdp.toml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hsdpToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x4f\x6f\xdb\xb8\x13\x3d\xff\xf4\x29\xe6\x57\x5d\xd7\x2e\xba\xb9\x05\xe8\xc1\x4d\x8c\x34\x68\x37\x29\xec\x2c\x8a\xc5\x22\x58\x8c\xa9\x91\x44\x54\x22\x09\x92\xb2\xe3\x6f\xbf\xa0\xfe\xc4\x92\x2d\x59\x54\xe3\xc5\x62\x6f\x31\xc5\x79\x33\x6f\xe6\xcd\x90\x4c\x08\x4f\x29\x37\xc0\x0d\x20\x24\x99\xdc\x60\x06\x9a\x12\x6e\xac\xde\x43\x2c\x35\xa8\x62\x93\x71\x06\x9f\xd7\xb7\xdf\xc0\x90\xde\x72\x46\x26\x08\x81\x49\x61\x91\x0b\x2e\x12\xc8\xa5\xb1\x60\x2c\x5a\xce\xdc\x72\xcc\x93\x42\xa3\xe5\x52\xcc\xe1\xde\x1a\xc8\x91\x0b\x50\x85\x56\xd2\x90\x73\x63\x25\x04\x21\x68\x8a\x0a\x46\xdd\xfd\xa0\x50\x63\x4e\x96\xb4\x01\x14\x11\x44\x9a\x6f\x09\xb0\xb0\x32\xaf\xbe\xcb\x18\x6c\x4a\xce\x5c\x65\x68\x63\xa9\x73\x88\x0b\x6d\x53\xd2\xb0\xd9\x43\x8a\x5b\x17\x0e\x42\x5a\xe4\x28\x4a\x84\x1c\x59\xca\x05\x81\x26\x8c\x70\x93\x11\x18\x59\x68\x46\x20\xe3\x92\x42\x9e\x4b\x31\x18\x42\x10\x3a\x47\x9f\x28\x96\x9a\xa0\x30\x0e\x9a\x5b\x40\x03\x7b\x59\xe8\x03\x10\x58\x5d\xd8\x14\x54\x46\x68\x6a\x3e\x3a\x77\x3b\x53\x74\x10\x2e\x5e\x7a\x51\xc4\x2c\x45\xb0\xc5\xac\x20\x33\x0f\xc2\x20\x84\x45\x66\xa4\xdb\x96\x48\x32\xb0\xe3\x36\x95\x85\x05\x83\x7b\x2e\x92\x5f\x60\x53\x58\xd8\x11\xec\x78\x96\xb9\xb5\xd2\xb1\xd8\xef\x70\x7f\x1d\x84\x70\x6f\x5d\x1a\xcb\x28\x34\x19\x25\x85\xe1\x1b\x9e\xd9\xbd\xcb\x2c\x09\x53\x68\x17\x86\xd6\xc4\xec\x11\x37\x19\x3b\x46\xa5\x61\x44\x2a\x93\xfb\x9c\x84\xad\xc3\xb9\x8f\xdd\x07\x30\x4a\x5a\x20\xad\xa5\x36\x20\x35\x70\xc1\x64\xae\x32\xb2\x04\x5c\xb8\x7c\xd7\x49\xaa\xc8\x6a\xe4\x86\x00\x1d\xe8\xb7\xd5\x1c\x9e\x52\x14\x3f\xcc\xff\x4b\xb8\x5b\x8a\xb9\xe0\x6e\xb3\xb9\x2e\x17\x56\x94\x38\xcb\x99\x53\x19\xc9\x44\xa3\x4a\x39\xab\xb5\x26\x05\xec\x52\xd2\xf4\xaa\x2f\x40\x4d\x75\x88\x14\x05\x21\x2c\xc5\x96\x6b\x29\x5c\xb8\x25\x82\xb1\x98\x50\x99\x34\x2e\x06\x00\xad\x04\xe4\x11\x38\xe9\xa5\x68\x28\x6a\x31\x76\xf1\xae\x2b\x4f\x25\x1a\x93\xc2\x14\x79\x2d\x8f\xd8\xee\xf0\x10\x89\x4b\x8c\x30\x16\x45\xbd\xd5\x28\x62\x3c\xe6\xac\x8d\x26\x63\xf7\xa1\xd9\x1f\x84\xf0\x99\x93\x46\xcd\xd2\x3d\xd0\x0b\xba\xec\x55\x19\x58\xa2\xb6\x69\x10\x02\x34\xb9\x28\xcc\x8c\xd0\xd8\x72\x09\x9a\x88\xea\x5f\x00\x2c\xae\xff\x6c\x93\x67\x19\x27\x61\x67\x96\x5e\xcd\x4e\x0d\x01\x38\xe6\x41\xf8\x3f\x00\x1e\xe5\xad\x55\x86\xda\x52\xd6\x05\xa5\x5c\x58\x50\x5a\x46\x05\x73\xb5\x1a\xc3\x3c\xfc\x1a\x46\x2e\x17\x22\xfd\xfa\xab\xcd\x98\x8a\xd9\xee\x10\xfa\x4f\x12\x1b\x08\xa2\x6a\xb7\x8b\x73\x33\x57\x4c\x97\x1a\x0c\x42\x78\x20\x63\xdd\x18\x30\x7b\x61\xf1\xe5\x1a\xfe\xac\xb4\x36\xa7\x03\x91\x79\x2d\x84\x39\xaf\x65\xf3\x5c\xd6\x7e\xdd\x08\x9b\xa1\x80\x0d\x81\xe5\x14\x95\x12\x6d\xe4\x2a\x35\xa0\x80\x16\x50\x10\xc2\x77\x02\x74\x43\x02\x85\xe5\x8c\x2b\xb4\xd4\x0c\xe8\x43\x9f\x58\x30\x32\x27\x50\x92\x97\x26\xcb\x4a\x70\x95\x26\x6b\xe8\x8d\x2c\x44\xd4\x98\x5c\xc3\x4d\x26\x8b\x08\x62\xb7\xa8\xf7\xc7\x26\x24\xf8\xb6\x29\xc9\x91\xdd\xfd\xe2\xb7\xa0\xd5\x38\x5d\x98\x26\x13\xb5\xa4\x5f\xb3\xc0\xe2\xe7\x00\x15\xff\xab\xd0\x19\x7c\x84\x77\xa9\xb5\xca\x5c\xbf\x7f\x8f\x8a\xcf\x99\x03\x98\x2b\x16\xbb\x9a\xcf\x99\xcc\xdf\xbd\xa2\xd4\x32\xf1\x41\xa1\xe2\xc3\x5c\xa5\x26\x52\x5d\x04\x83\x1f\x7c\xac\xcd\xde\x94\x5b\x4b\x00\x2e\x0f\xf6\xa8\x90\x5d\xf9\x22\xa0\xba\x3a\x20\xb4\x52\x74\xfb\x78\xf3\x65\xb9\x9a\xad\x96\x77\xf7\xeb\xa7\xd5\x1f\x83\x49\x8a\x24\xfb\x41\x7a\xd6\x9c\xba\xcf\x41\xea\x0e\xd4\x8f\xf0\xae\xfa\x30\x17\x7d\x11\x1e\xe7\x68\x0c\xc4\x25\xea\x04\xa4\x9d\xa6\x31\x00\x8f\x3c\x8d\x41\x0c\x25\xea\xe6\xf1\x61\xfd\xf8\x75\x39\xac\x22\x29\x8c\xcc\xe8\x39\x38\x2a\x40\xbd\xee\x97\xa0\x31\x90\xd1\x04\x8d\x01\xf8\x08\x69\x04\x62\x28\x41\xae\xf7\x8e\x93\x43\x62\x3b\x6f\x4d\xcd\xc3\xe0\xc1\xfc\x04\x9f\x63\x3e\x6b\xef\x6d\x30\x54\xca\x33\xae\xcc\x2c\x25\xcc\x6c\x6a\x0a\x6e\xa9\xea\x23\x8e\xf9\xb1\xda\xa7\x63\x44\xa7\x18\xd1\x44\x8c\x3e\xd2\x6e\xa4\x8f\xb2\x6d\xbe\xff\x2c\x53\x7f\xfb\x7e\x96\xde\xf6\xc7\x72\x9d\x5a\xd6\x7f\x9b\x68\x3b\xd6\x86\xc3\x24\xb2\xff\xa9\x72\x7a\x33\x74\xc3\xe0\x2d\x1d\xda\x19\x26\x1e\xdd\xd8\xdd\x3f\x5e\xaa\xde\x61\xd5\x04\x3d\xa9\x24\x3e\x91\xf6\xef\x3d\x9f\xea\x33\xe3\x74\x72\x8c\x9d\xb9\x3a\x12\x63\x77\xef\xf9\x18\x3b\x7b\xfb\x66\x55\x44\xdb\xd1\x20\x23\xda\x52\x26\x55\x79\x7b\xfc\x59\x7d\x4f\xc3\xe8\x27\x35\x09\xa3\x7d\x38\xdd\xf6\x1f\x4e\xdd\x0a\x45\x3d\xe4\xff\x91\x39\x39\xe0\xe8\xc2\x73\x6a\x84\xce\x65\xe6\x84\x07\x95\x09\x7d\x3c\x12\xf2\xa4\x7e\x1b\xc1\x9a\xd6\x17\x03\x60\xd3\xf4\xd8\xbe\x4e\x2e\x56\x4f\xcb\xaf\xc3\xb7\xc9\xf2\xb5\x7a\xb8\x9c\x56\xbf\x67\xee\x12\x59\xbf\x49\x4e\xdf\x13\x27\x97\xc9\x7e\x0c\x77\x87\x1c\xc4\xe8\xdc\x25\xfb\xed\x4d\x5f\x0c\x2d\x66\x77\x8b\xa7\xe5\xf7\xc5\xf0\x4b\x22\x41\x4b\x3b\x6c\x5d\xbc\x93\x5d\xc9\xcb\x83\x51\x9f\xa9\xc7\xe3\xaa\xcf\xcc\xf4\x7b\xec\x5e\x85\xfb\x0c\xab\x1d\xfd\xd4\xd7\x57\x37\xab\xe5\xed\xda\xfb\x1a\x5c\xbd\xdb\xcd\x89\xb2\xea\xf5\x0b\x5f\x43\xc7\xbc\x5d\x7c\xcc\x4d\xa1\xf7\xf6\x71\xe7\x4b\x6f\xd4\x53\xab\xa0\x9f\x17\x6b\x6f\xb6\x29\x9e\xfa\x4e\x71\x22\xcb\xf6\x84\xb8\x5d\xcd\xd6\x4f\xbf\x5f\xf5\x16\xd6\xa0\x88\x36\xf2\xe5\xd0\xab\x91\x9e\x19\x5b\x5c\x9d\xbe\xda\xea\x0f\xb3\xc6\x62\xca\xa9\xf9\xf5\xf1\xee\xee\xfe\xe1\xce\x3b\x05\x99\x4c\x12\x2e\x92\x93\x20\x32\xe9\x96\xc9\x58\xa9\x7f\xbd\x70\xd5\x7d\x5c\xfa\xbb\x19\x6b\xd8\xc9\x04\xdf\xde\xb5\x5e\x04\xbd\xdd\x9c\x3b\xca\x27\x93\xf3\x3f\xd7\xbd\x48\x4c\x39\xdc\xbd\x00\x87\xfe\x53\xf1\xe5\xfe\xd3\xe2\x61\xe1\xad\xea\x1f\x7c\x83\x02\x4f\x5c\x55\xcb\x17\x96\xf3\x59\x5f\x97\xd3\xb1\x3f\xa5\xb7\x0b\xf8\x3c\xa5\x8b\x28\xd7\x9f\x8e\xbf\x64\xcf\x87\x3d\x45\xab\xe7\x91\x3a\x22\xfd\x3b\x00\x00\xff\xff\xac\x62\x61\x80\xe8\x1c\x00\x00")

func hsdpTomlBytes() ([]byte, error) {
	return bindataRead(
		_hsdpToml,
		"hsdp.toml",
	)
}

func hsdpToml() (*asset, error) {
	bytes, err := hsdpTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hsdp.toml", size: 7400, mode: os.FileMode(420), modTime: time.Unix(1597564871, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hsdp.toml": hsdpToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hsdp.toml": &bintree{hsdpToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
